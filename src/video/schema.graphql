# import Service from "../../database/generated/graphql-schema/prisma.graphql"

"""Video queries"""
type Query {
  """Retrieve a paginated list of video clips"""
  clips(service: ID, genre: ID, genreIsNull: Boolean, serie: ID, serieIsNull: Boolean, category: ID, categoryIsNull: Boolean, correspondent: ID, correspondentIsNull: Boolean, topic: ID, topicIsNull: Boolean, country: String, first: Int = 0, offset: Int = 0): [Clip!]!
  """Retreive a single clip"""
  clip(service: ID, id: ID!): Clip

  """Retrieve a paginated list of series"""
  series(service: ID, first: Int = 0, offset: Int = 0): [Serie!]!
  """Retreive a single series"""
  serie(service: ID, id: ID!): Serie

  """Retrieve a paginated list of video categories"""
  categories(service: ID, first: Int = 0, offset: Int = 0): [Category!]!
  """Retreive a single video category"""
  category(service: ID, id: ID!): Category

  """Retrieve a paginated list of video genres"""
  genres(service: ID, first: Int = 0, offset: Int = 0): [Genre!]!
  """Retreive a single video genre"""
  genre(service: ID, id: ID!): Genre

  """Retrieve a paginated list of correspondents"""
  correspondents(service: ID, country: String, first: Int = 0, offset: Int = 0): [Correspondent!]!
  """Retreive a single correspondent"""
  correspondent(service: ID, id: ID!): Correspondent

  """Retrieve a paginated list of video topics"""
  topics(service: ID, first: Int = 0, offset: Int = 0): [Topic!]!
  """Retreive a single video topic"""
  topic(service: ID, id: ID!): Topic
}

extend type Service {
  genres: [Genre!]!
  clips(genre: ID, genreIsNull: Boolean, serie: ID, serieIsNull: Boolean, category: ID categoryIsNull: Boolean, correspondent: ID, correspondentIsNull: Boolean, topic: ID, topicIsNull: Boolean, country: String, first: Int, offset: Int): [Clip!]!
  series(first: Int = 0, offset: Int = 0): [Serie!]!
  categories: [Category!]!
}

"""Video clip"""
type Clip {
  id: ID!
  title: String!
  description: String!
  """Publication date formatted in ISO 8601"""
  date: String!
  """HTML Embed code"""
  embed: String
  """Source MP4 file"""
  mp4: String!
  """When available, the URL of the playlist for HLS playback (Apple HTTP Live Streaming)."""
  hls: String
  url: String
  thumbnail: String!
  thumbnailSmall: String!
  """When available, a WebVTT file containing a timed thumbnail map usefull for thumbnail previews on video player progress bar"""
  thumbnails: String
  """Correpsonding uploaded YouTube ID, if available"""
  youtube: String
  width: Int
  height: Int
  aspectRatio: Float
  service: Service!
  genre: Genre
  serie: Serie
  category: Category
  correspondent: Correspondent
  topic: Topic
}

"""Video genre"""
type Genre {
  id: ID!
  """Singular name"""
  name: String!
  """Plural name"""
  plural: String!
  description: String
  downloadable: Boolean!
  clips(serie: ID, serieIsNull: Boolean, category: ID, categoryIsNull: Boolean, correspondent: ID, correspondentIsNull: Boolean, topic: ID, topicIsNull: Boolean, country: String, first: Int, offset: Int): [Clip!]!
}

"""Video clip category"""
type Category {
  id: ID!
  name: String!
  clips(genre: ID, genreIsNull: Boolean, serie: ID, serieIsNull: Boolean, correspondent: ID, correspondentIsNull: Boolean, topic: ID, topicIsNull: Boolean, country: String, first: Int, offset: Int): [Clip!]!
}

"""Show or Serie"""
type Serie {
  id: ID!
  name: String
  poster: String
  description: String
  serieType: String
  episodes(first: Int, offset: Int): [Clip!]!
}

"""Correspondent"""
type Correspondent {
  id: ID!
  name: String!
  twitter: String
  country: String
  clips(genre: ID, serie: ID, serieIsNull: Boolean, category: ID, categoryIsNull: Boolean, topic: ID, topicIsNull: Boolean, country: String, first: Int, offset: Int): [Clip!]!
}

"""Topic"""
type Topic {
  id: ID!
  name: String!
  description: String
  clips(genre: ID, genreIsNull: Boolean, serie: ID, serieIsNull: Boolean, category: ID, categoryIsNull: Boolean, correspondent: ID, correspondentIsNull: Boolean, country: String, first: Int, offset: Int): [Clip!]!
}
