// Code generated by Prisma (prisma@1.22.2). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  article: (where?: ArticleWhereInput) => Promise<boolean>;
  articleSection: (where?: ArticleSectionWhereInput) => Promise<boolean>;
  playlist: (where?: PlaylistWhereInput) => Promise<boolean>;
  playlistItem: (where?: PlaylistItemWhereInput) => Promise<boolean>;
  service: (where?: ServiceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  video: (where?: VideoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  article: (where: ArticleWhereUniqueInput) => ArticlePromise;
  articles: (
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Article>;
  articlesConnection: (
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ArticleConnectionPromise;
  articleSection: (
    where: ArticleSectionWhereUniqueInput
  ) => ArticleSectionPromise;
  articleSections: (
    args?: {
      where?: ArticleSectionWhereInput;
      orderBy?: ArticleSectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ArticleSection>;
  articleSectionsConnection: (
    args?: {
      where?: ArticleSectionWhereInput;
      orderBy?: ArticleSectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ArticleSectionConnectionPromise;
  playlist: (where: PlaylistWhereUniqueInput) => PlaylistPromise;
  playlists: (
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Playlist>;
  playlistsConnection: (
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlaylistConnectionPromise;
  playlistItem: (where: PlaylistItemWhereUniqueInput) => PlaylistItemPromise;
  playlistItems: (
    args?: {
      where?: PlaylistItemWhereInput;
      orderBy?: PlaylistItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<PlaylistItem>;
  playlistItemsConnection: (
    args?: {
      where?: PlaylistItemWhereInput;
      orderBy?: PlaylistItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlaylistItemConnectionPromise;
  service: (where: ServiceWhereUniqueInput) => ServicePromise;
  services: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Service>;
  servicesConnection: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ServiceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  video: (where: VideoWhereUniqueInput) => VideoPromise;
  videos: (
    args?: {
      where?: VideoWhereInput;
      orderBy?: VideoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Video>;
  videosConnection: (
    args?: {
      where?: VideoWhereInput;
      orderBy?: VideoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => VideoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createArticle: (data: ArticleCreateInput) => ArticlePromise;
  updateArticle: (
    args: { data: ArticleUpdateInput; where: ArticleWhereUniqueInput }
  ) => ArticlePromise;
  updateManyArticles: (
    args: { data: ArticleUpdateManyMutationInput; where?: ArticleWhereInput }
  ) => BatchPayloadPromise;
  upsertArticle: (
    args: {
      where: ArticleWhereUniqueInput;
      create: ArticleCreateInput;
      update: ArticleUpdateInput;
    }
  ) => ArticlePromise;
  deleteArticle: (where: ArticleWhereUniqueInput) => ArticlePromise;
  deleteManyArticles: (where?: ArticleWhereInput) => BatchPayloadPromise;
  createArticleSection: (
    data: ArticleSectionCreateInput
  ) => ArticleSectionPromise;
  updateArticleSection: (
    args: {
      data: ArticleSectionUpdateInput;
      where: ArticleSectionWhereUniqueInput;
    }
  ) => ArticleSectionPromise;
  updateManyArticleSections: (
    args: {
      data: ArticleSectionUpdateManyMutationInput;
      where?: ArticleSectionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertArticleSection: (
    args: {
      where: ArticleSectionWhereUniqueInput;
      create: ArticleSectionCreateInput;
      update: ArticleSectionUpdateInput;
    }
  ) => ArticleSectionPromise;
  deleteArticleSection: (
    where: ArticleSectionWhereUniqueInput
  ) => ArticleSectionPromise;
  deleteManyArticleSections: (
    where?: ArticleSectionWhereInput
  ) => BatchPayloadPromise;
  createPlaylist: (data: PlaylistCreateInput) => PlaylistPromise;
  updatePlaylist: (
    args: { data: PlaylistUpdateInput; where: PlaylistWhereUniqueInput }
  ) => PlaylistPromise;
  updateManyPlaylists: (
    args: { data: PlaylistUpdateManyMutationInput; where?: PlaylistWhereInput }
  ) => BatchPayloadPromise;
  upsertPlaylist: (
    args: {
      where: PlaylistWhereUniqueInput;
      create: PlaylistCreateInput;
      update: PlaylistUpdateInput;
    }
  ) => PlaylistPromise;
  deletePlaylist: (where: PlaylistWhereUniqueInput) => PlaylistPromise;
  deleteManyPlaylists: (where?: PlaylistWhereInput) => BatchPayloadPromise;
  createPlaylistItem: (data: PlaylistItemCreateInput) => PlaylistItemPromise;
  updatePlaylistItem: (
    args: { data: PlaylistItemUpdateInput; where: PlaylistItemWhereUniqueInput }
  ) => PlaylistItemPromise;
  updateManyPlaylistItems: (
    args: {
      data: PlaylistItemUpdateManyMutationInput;
      where?: PlaylistItemWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertPlaylistItem: (
    args: {
      where: PlaylistItemWhereUniqueInput;
      create: PlaylistItemCreateInput;
      update: PlaylistItemUpdateInput;
    }
  ) => PlaylistItemPromise;
  deletePlaylistItem: (
    where: PlaylistItemWhereUniqueInput
  ) => PlaylistItemPromise;
  deleteManyPlaylistItems: (
    where?: PlaylistItemWhereInput
  ) => BatchPayloadPromise;
  createService: (data: ServiceCreateInput) => ServicePromise;
  updateService: (
    args: { data: ServiceUpdateInput; where: ServiceWhereUniqueInput }
  ) => ServicePromise;
  updateManyServices: (
    args: { data: ServiceUpdateManyMutationInput; where?: ServiceWhereInput }
  ) => BatchPayloadPromise;
  upsertService: (
    args: {
      where: ServiceWhereUniqueInput;
      create: ServiceCreateInput;
      update: ServiceUpdateInput;
    }
  ) => ServicePromise;
  deleteService: (where: ServiceWhereUniqueInput) => ServicePromise;
  deleteManyServices: (where?: ServiceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVideo: (data: VideoCreateInput) => VideoPromise;
  updateVideo: (
    args: { data: VideoUpdateInput; where: VideoWhereUniqueInput }
  ) => VideoPromise;
  updateManyVideos: (
    args: { data: VideoUpdateManyMutationInput; where?: VideoWhereInput }
  ) => BatchPayloadPromise;
  upsertVideo: (
    args: {
      where: VideoWhereUniqueInput;
      create: VideoCreateInput;
      update: VideoUpdateInput;
    }
  ) => VideoPromise;
  deleteVideo: (where: VideoWhereUniqueInput) => VideoPromise;
  deleteManyVideos: (where?: VideoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  article: (
    where?: ArticleSubscriptionWhereInput
  ) => ArticleSubscriptionPayloadSubscription;
  articleSection: (
    where?: ArticleSectionSubscriptionWhereInput
  ) => ArticleSectionSubscriptionPayloadSubscription;
  playlist: (
    where?: PlaylistSubscriptionWhereInput
  ) => PlaylistSubscriptionPayloadSubscription;
  playlistItem: (
    where?: PlaylistItemSubscriptionWhereInput
  ) => PlaylistItemSubscriptionPayloadSubscription;
  service: (
    where?: ServiceSubscriptionWhereInput
  ) => ServiceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  video: (
    where?: VideoSubscriptionWhereInput
  ) => VideoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "language_ASC"
  | "language_DESC"
  | "url_ASC"
  | "url_DESC"
  | "liveUrl_ASC"
  | "liveUrl_DESC"
  | "videoUrl_ASC"
  | "videoUrl_DESC"
  | "videoRestUrl_ASC"
  | "videoRestUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type SOURCE_TYPE = "CLIPS" | "MEDIAFNS" | "YOUTUBE";

export type ArticleSectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ArticleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "headline_ASC"
  | "headline_DESC"
  | "description_ASC"
  | "description_DESC"
  | "datePublished_ASC"
  | "datePublished_DESC"
  | "body_ASC"
  | "body_DESC"
  | "author_ASC"
  | "author_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type LANGUAGE = "ES" | "EN";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PlaylistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "childrenName_ASC"
  | "childrenName_DESC"
  | "description_ASC"
  | "description_DESC"
  | "metadata_ASC"
  | "metadata_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PlaylistItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "dateAdded_ASC"
  | "dateAdded_DESC"
  | "metadata_ASC"
  | "metadata_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type VideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "datePublished_ASC"
  | "datePublished_DESC"
  | "dateFirstPublished_ASC"
  | "dateFirstPublished_DESC"
  | "paid_ASC"
  | "paid_DESC"
  | "sourceId_ASC"
  | "sourceId_DESC"
  | "sourceType_ASC"
  | "sourceType_DESC"
  | "metadata_ASC"
  | "metadata_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export interface PlaylistUpdateWithoutUserDataInput {
  name?: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
  parent?: PlaylistUpdateOneWithoutChildrenInput;
  children?: PlaylistUpdateManyWithoutParentInput;
  items?: PlaylistItemUpdateManyWithoutPlayListInput;
  service?: ServiceUpdateOneRequiredInput;
}

export type ArticleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  url?: String;
}>;

export interface VideoUpdateOneRequiredWithoutPlayListItemsInput {
  create?: VideoCreateWithoutPlayListItemsInput;
  update?: VideoUpdateWithoutPlayListItemsDataInput;
  upsert?: VideoUpsertWithoutPlayListItemsInput;
  connect?: VideoWhereUniqueInput;
}

export interface VideoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  datePublished?: DateTimeInput;
  datePublished_not?: DateTimeInput;
  datePublished_in?: DateTimeInput[] | DateTimeInput;
  datePublished_not_in?: DateTimeInput[] | DateTimeInput;
  datePublished_lt?: DateTimeInput;
  datePublished_lte?: DateTimeInput;
  datePublished_gt?: DateTimeInput;
  datePublished_gte?: DateTimeInput;
  dateFirstPublished?: DateTimeInput;
  dateFirstPublished_not?: DateTimeInput;
  dateFirstPublished_in?: DateTimeInput[] | DateTimeInput;
  dateFirstPublished_not_in?: DateTimeInput[] | DateTimeInput;
  dateFirstPublished_lt?: DateTimeInput;
  dateFirstPublished_lte?: DateTimeInput;
  dateFirstPublished_gt?: DateTimeInput;
  dateFirstPublished_gte?: DateTimeInput;
  paid?: Boolean;
  paid_not?: Boolean;
  sourceId?: String;
  sourceId_not?: String;
  sourceId_in?: String[] | String;
  sourceId_not_in?: String[] | String;
  sourceId_lt?: String;
  sourceId_lte?: String;
  sourceId_gt?: String;
  sourceId_gte?: String;
  sourceId_contains?: String;
  sourceId_not_contains?: String;
  sourceId_starts_with?: String;
  sourceId_not_starts_with?: String;
  sourceId_ends_with?: String;
  sourceId_not_ends_with?: String;
  sourceType?: SOURCE_TYPE;
  sourceType_not?: SOURCE_TYPE;
  sourceType_in?: SOURCE_TYPE[] | SOURCE_TYPE;
  sourceType_not_in?: SOURCE_TYPE[] | SOURCE_TYPE;
  playListItems_every?: PlaylistItemWhereInput;
  playListItems_some?: PlaylistItemWhereInput;
  playListItems_none?: PlaylistItemWhereInput;
  service?: ServiceWhereInput;
  AND?: VideoWhereInput[] | VideoWhereInput;
  OR?: VideoWhereInput[] | VideoWhereInput;
  NOT?: VideoWhereInput[] | VideoWhereInput;
}

export interface VideoUpdateWithoutPlayListItemsDataInput {
  name?: String;
  description?: String;
  datePublished?: DateTimeInput;
  dateFirstPublished?: DateTimeInput;
  paid?: Boolean;
  sourceId?: String;
  sourceType?: SOURCE_TYPE;
  tags?: VideoUpdatetagsInput;
  metadata?: Json;
  service?: ServiceUpdateOneRequiredWithoutVideosInput;
}

export interface PlaylistItemWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateAdded?: DateTimeInput;
  dateAdded_not?: DateTimeInput;
  dateAdded_in?: DateTimeInput[] | DateTimeInput;
  dateAdded_not_in?: DateTimeInput[] | DateTimeInput;
  dateAdded_lt?: DateTimeInput;
  dateAdded_lte?: DateTimeInput;
  dateAdded_gt?: DateTimeInput;
  dateAdded_gte?: DateTimeInput;
  playList?: PlaylistWhereInput;
  video?: VideoWhereInput;
  AND?: PlaylistItemWhereInput[] | PlaylistItemWhereInput;
  OR?: PlaylistItemWhereInput[] | PlaylistItemWhereInput;
  NOT?: PlaylistItemWhereInput[] | PlaylistItemWhereInput;
}

export interface ArticleUpdatetagsInput {
  set?: String[] | String;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface ArticleUpdateimagesInput {
  set?: String[] | String;
}

export interface VideoUpdatetagsInput {
  set?: String[] | String;
}

export interface ArticleSectionUpdateManyWithoutArticlesInput {
  create?:
    | ArticleSectionCreateWithoutArticlesInput[]
    | ArticleSectionCreateWithoutArticlesInput;
  delete?: ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput;
  connect?: ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput;
  disconnect?:
    | ArticleSectionWhereUniqueInput[]
    | ArticleSectionWhereUniqueInput;
  update?:
    | ArticleSectionUpdateWithWhereUniqueWithoutArticlesInput[]
    | ArticleSectionUpdateWithWhereUniqueWithoutArticlesInput;
  upsert?:
    | ArticleSectionUpsertWithWhereUniqueWithoutArticlesInput[]
    | ArticleSectionUpsertWithWhereUniqueWithoutArticlesInput;
  deleteMany?:
    | ArticleSectionScalarWhereInput[]
    | ArticleSectionScalarWhereInput;
  updateMany?:
    | ArticleSectionUpdateManyWithWhereNestedInput[]
    | ArticleSectionUpdateManyWithWhereNestedInput;
}

export interface VideoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VideoWhereInput;
  AND?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
  OR?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
  NOT?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
}

export interface ArticleSectionUpdateWithWhereUniqueWithoutArticlesInput {
  where: ArticleSectionWhereUniqueInput;
  data: ArticleSectionUpdateWithoutArticlesDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ArticleSectionUpdateWithoutArticlesDataInput {
  name?: String;
}

export interface ArticleSectionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  articles_every?: ArticleWhereInput;
  articles_some?: ArticleWhereInput;
  articles_none?: ArticleWhereInput;
  AND?: ArticleSectionWhereInput[] | ArticleSectionWhereInput;
  OR?: ArticleSectionWhereInput[] | ArticleSectionWhereInput;
  NOT?: ArticleSectionWhereInput[] | ArticleSectionWhereInput;
}

export interface ArticleSectionUpsertWithWhereUniqueWithoutArticlesInput {
  where: ArticleSectionWhereUniqueInput;
  update: ArticleSectionUpdateWithoutArticlesDataInput;
  create: ArticleSectionCreateWithoutArticlesInput;
}

export interface PlaylistItemSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlaylistItemWhereInput;
  AND?:
    | PlaylistItemSubscriptionWhereInput[]
    | PlaylistItemSubscriptionWhereInput;
  OR?:
    | PlaylistItemSubscriptionWhereInput[]
    | PlaylistItemSubscriptionWhereInput;
  NOT?:
    | PlaylistItemSubscriptionWhereInput[]
    | PlaylistItemSubscriptionWhereInput;
}

export interface ArticleSectionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: ArticleSectionScalarWhereInput[] | ArticleSectionScalarWhereInput;
  OR?: ArticleSectionScalarWhereInput[] | ArticleSectionScalarWhereInput;
  NOT?: ArticleSectionScalarWhereInput[] | ArticleSectionScalarWhereInput;
}

export interface ArticleSectionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ArticleSectionWhereInput;
  AND?:
    | ArticleSectionSubscriptionWhereInput[]
    | ArticleSectionSubscriptionWhereInput;
  OR?:
    | ArticleSectionSubscriptionWhereInput[]
    | ArticleSectionSubscriptionWhereInput;
  NOT?:
    | ArticleSectionSubscriptionWhereInput[]
    | ArticleSectionSubscriptionWhereInput;
}

export interface ArticleSectionUpdateManyWithWhereNestedInput {
  where: ArticleSectionScalarWhereInput;
  data: ArticleSectionUpdateManyDataInput;
}

export interface VideoUpdateManyMutationInput {
  name?: String;
  description?: String;
  datePublished?: DateTimeInput;
  dateFirstPublished?: DateTimeInput;
  paid?: Boolean;
  sourceId?: String;
  sourceType?: SOURCE_TYPE;
  tags?: VideoUpdatetagsInput;
  metadata?: Json;
}

export interface ArticleSectionUpdateManyDataInput {
  name?: String;
}

export interface VideoCreateInput {
  name: String;
  description?: String;
  datePublished?: DateTimeInput;
  dateFirstPublished?: DateTimeInput;
  paid?: Boolean;
  sourceId: String;
  sourceType: SOURCE_TYPE;
  tags?: VideoCreatetagsInput;
  metadata?: Json;
  playListItems?: PlaylistItemCreateManyWithoutVideoInput;
  service: ServiceCreateOneWithoutVideosInput;
}

export interface ServiceUpdateOneRequiredWithoutArticlesInput {
  create?: ServiceCreateWithoutArticlesInput;
  update?: ServiceUpdateWithoutArticlesDataInput;
  upsert?: ServiceUpsertWithoutArticlesInput;
  connect?: ServiceWhereUniqueInput;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  services?: ServiceUpdateManyWithoutUsersInput;
  playlists?: PlaylistUpdateManyWithoutUserInput;
}

export interface ServiceUpdateWithoutArticlesDataInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  users?: UserUpdateManyWithoutServicesInput;
  videos?: VideoUpdateManyWithoutServiceInput;
}

export interface UserCreateInput {
  email: String;
  name?: String;
  services?: ServiceCreateManyWithoutUsersInput;
  playlists?: PlaylistCreateManyWithoutUserInput;
}

export interface UserUpdateManyWithoutServicesInput {
  create?: UserCreateWithoutServicesInput[] | UserCreateWithoutServicesInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutServicesInput[]
    | UserUpdateWithWhereUniqueWithoutServicesInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutServicesInput[]
    | UserUpsertWithWhereUniqueWithoutServicesInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface ServiceUpdateInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleUpdateManyWithoutServiceInput;
  users?: UserUpdateManyWithoutServicesInput;
  videos?: VideoUpdateManyWithoutServiceInput;
}

export interface UserUpdateWithWhereUniqueWithoutServicesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutServicesDataInput;
}

export interface PlaylistItemUpdateManyMutationInput {
  dateAdded?: DateTimeInput;
  metadata?: Json;
}

export interface UserUpdateWithoutServicesDataInput {
  email?: String;
  name?: String;
  playlists?: PlaylistUpdateManyWithoutUserInput;
}

export interface PlaylistItemCreateInput {
  dateAdded?: DateTimeInput;
  metadata?: Json;
  playList: PlaylistCreateOneWithoutItemsInput;
  video: VideoCreateOneWithoutPlayListItemsInput;
}

export interface PlaylistUpdateManyWithoutUserInput {
  create?: PlaylistCreateWithoutUserInput[] | PlaylistCreateWithoutUserInput;
  delete?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  connect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  disconnect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  update?:
    | PlaylistUpdateWithWhereUniqueWithoutUserInput[]
    | PlaylistUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | PlaylistUpsertWithWhereUniqueWithoutUserInput[]
    | PlaylistUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: PlaylistScalarWhereInput[] | PlaylistScalarWhereInput;
  updateMany?:
    | PlaylistUpdateManyWithWhereNestedInput[]
    | PlaylistUpdateManyWithWhereNestedInput;
}

export interface PlaylistUpdateManyMutationInput {
  name?: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
}

export interface PlaylistUpdateWithWhereUniqueWithoutUserInput {
  where: PlaylistWhereUniqueInput;
  data: PlaylistUpdateWithoutUserDataInput;
}

export interface PlaylistCreateInput {
  name: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
  parent?: PlaylistCreateOneWithoutChildrenInput;
  children?: PlaylistCreateManyWithoutParentInput;
  items?: PlaylistItemCreateManyWithoutPlayListInput;
  user?: UserCreateOneWithoutPlaylistsInput;
  service: ServiceCreateOneInput;
}

export interface ArticleUpdateManyMutationInput {
  url?: String;
  headline?: String;
  description?: String;
  datePublished?: DateTimeInput;
  body?: String;
  author?: String;
  tags?: ArticleUpdatetagsInput;
  images?: ArticleUpdateimagesInput;
}

export interface ArticleSectionUpdateManyMutationInput {
  name?: String;
}

export interface PlaylistUpdateOneWithoutChildrenInput {
  create?: PlaylistCreateWithoutChildrenInput;
  update?: PlaylistUpdateWithoutChildrenDataInput;
  upsert?: PlaylistUpsertWithoutChildrenInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: PlaylistWhereUniqueInput;
}

export interface ArticleUpdateWithoutSectionsDataInput {
  url?: String;
  headline?: String;
  description?: String;
  datePublished?: DateTimeInput;
  body?: String;
  author?: String;
  tags?: ArticleUpdatetagsInput;
  images?: ArticleUpdateimagesInput;
  service?: ServiceUpdateOneRequiredWithoutArticlesInput;
}

export interface PlaylistUpdateWithoutChildrenDataInput {
  name?: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
  parent?: PlaylistUpdateOneWithoutChildrenInput;
  items?: PlaylistItemUpdateManyWithoutPlayListInput;
  user?: UserUpdateOneWithoutPlaylistsInput;
  service?: ServiceUpdateOneRequiredInput;
}

export interface ArticleUpdateWithWhereUniqueWithoutSectionsInput {
  where: ArticleWhereUniqueInput;
  data: ArticleUpdateWithoutSectionsDataInput;
}

export interface PlaylistItemUpdateManyWithoutPlayListInput {
  create?:
    | PlaylistItemCreateWithoutPlayListInput[]
    | PlaylistItemCreateWithoutPlayListInput;
  delete?: PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput;
  connect?: PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput;
  disconnect?: PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput;
  update?:
    | PlaylistItemUpdateWithWhereUniqueWithoutPlayListInput[]
    | PlaylistItemUpdateWithWhereUniqueWithoutPlayListInput;
  upsert?:
    | PlaylistItemUpsertWithWhereUniqueWithoutPlayListInput[]
    | PlaylistItemUpsertWithWhereUniqueWithoutPlayListInput;
  deleteMany?: PlaylistItemScalarWhereInput[] | PlaylistItemScalarWhereInput;
  updateMany?:
    | PlaylistItemUpdateManyWithWhereNestedInput[]
    | PlaylistItemUpdateManyWithWhereNestedInput;
}

export interface ArticleSectionUpdateInput {
  name?: String;
  articles?: ArticleUpdateManyWithoutSectionsInput;
}

export interface PlaylistItemUpdateWithWhereUniqueWithoutPlayListInput {
  where: PlaylistItemWhereUniqueInput;
  data: PlaylistItemUpdateWithoutPlayListDataInput;
}

export interface ArticleCreateWithoutSectionsInput {
  url: String;
  headline: String;
  description?: String;
  datePublished: DateTimeInput;
  body: String;
  author?: String;
  tags?: ArticleCreatetagsInput;
  images?: ArticleCreateimagesInput;
  service: ServiceCreateOneWithoutArticlesInput;
}

export interface PlaylistItemUpdateWithoutPlayListDataInput {
  dateAdded?: DateTimeInput;
  metadata?: Json;
  video?: VideoUpdateOneRequiredWithoutPlayListItemsInput;
}

export interface ArticleSectionCreateInput {
  name: String;
  articles?: ArticleCreateManyWithoutSectionsInput;
}

export interface ServiceUpsertWithoutArticlesInput {
  update: ServiceUpdateWithoutArticlesDataInput;
  create: ServiceCreateWithoutArticlesInput;
}

export interface ArticleCreateInput {
  url: String;
  headline: String;
  description?: String;
  datePublished: DateTimeInput;
  body: String;
  author?: String;
  tags?: ArticleCreatetagsInput;
  images?: ArticleCreateimagesInput;
  sections?: ArticleSectionCreateManyWithoutArticlesInput;
  service: ServiceCreateOneWithoutArticlesInput;
}

export interface PlaylistWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  childrenName?: String;
  childrenName_not?: String;
  childrenName_in?: String[] | String;
  childrenName_not_in?: String[] | String;
  childrenName_lt?: String;
  childrenName_lte?: String;
  childrenName_gt?: String;
  childrenName_gte?: String;
  childrenName_contains?: String;
  childrenName_not_contains?: String;
  childrenName_starts_with?: String;
  childrenName_not_starts_with?: String;
  childrenName_ends_with?: String;
  childrenName_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  parent?: PlaylistWhereInput;
  children_every?: PlaylistWhereInput;
  children_some?: PlaylistWhereInput;
  children_none?: PlaylistWhereInput;
  items_every?: PlaylistItemWhereInput;
  items_some?: PlaylistItemWhereInput;
  items_none?: PlaylistItemWhereInput;
  user?: UserWhereInput;
  service?: ServiceWhereInput;
  AND?: PlaylistWhereInput[] | PlaylistWhereInput;
  OR?: PlaylistWhereInput[] | PlaylistWhereInput;
  NOT?: PlaylistWhereInput[] | PlaylistWhereInput;
}

export interface ArticleCreateimagesInput {
  set?: String[] | String;
}

export interface UserUpdateManyDataInput {
  email?: String;
  name?: String;
}

export interface ArticleSectionCreateWithoutArticlesInput {
  name: String;
}

export interface ServiceUpdateOneRequiredWithoutVideosInput {
  create?: ServiceCreateWithoutVideosInput;
  update?: ServiceUpdateWithoutVideosDataInput;
  upsert?: ServiceUpsertWithoutVideosInput;
  connect?: ServiceWhereUniqueInput;
}

export interface ServiceCreateWithoutArticlesInput {
  name: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  users?: UserCreateManyWithoutServicesInput;
  videos?: VideoCreateManyWithoutServiceInput;
}

export interface ServiceUpdateWithoutVideosDataInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleUpdateManyWithoutServiceInput;
  users?: UserUpdateManyWithoutServicesInput;
}

export interface UserCreateWithoutServicesInput {
  email: String;
  name?: String;
  playlists?: PlaylistCreateManyWithoutUserInput;
}

export interface ArticleUpdateManyWithoutServiceInput {
  create?:
    | ArticleCreateWithoutServiceInput[]
    | ArticleCreateWithoutServiceInput;
  delete?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  connect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  disconnect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  update?:
    | ArticleUpdateWithWhereUniqueWithoutServiceInput[]
    | ArticleUpdateWithWhereUniqueWithoutServiceInput;
  upsert?:
    | ArticleUpsertWithWhereUniqueWithoutServiceInput[]
    | ArticleUpsertWithWhereUniqueWithoutServiceInput;
  deleteMany?: ArticleScalarWhereInput[] | ArticleScalarWhereInput;
  updateMany?:
    | ArticleUpdateManyWithWhereNestedInput[]
    | ArticleUpdateManyWithWhereNestedInput;
}

export interface PlaylistCreateWithoutUserInput {
  name: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
  parent?: PlaylistCreateOneWithoutChildrenInput;
  children?: PlaylistCreateManyWithoutParentInput;
  items?: PlaylistItemCreateManyWithoutPlayListInput;
  service: ServiceCreateOneInput;
}

export interface ArticleUpdateWithWhereUniqueWithoutServiceInput {
  where: ArticleWhereUniqueInput;
  data: ArticleUpdateWithoutServiceDataInput;
}

export interface PlaylistCreateWithoutChildrenInput {
  name: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
  parent?: PlaylistCreateOneWithoutChildrenInput;
  items?: PlaylistItemCreateManyWithoutPlayListInput;
  user?: UserCreateOneWithoutPlaylistsInput;
  service: ServiceCreateOneInput;
}

export interface ArticleUpdateWithoutServiceDataInput {
  url?: String;
  headline?: String;
  description?: String;
  datePublished?: DateTimeInput;
  body?: String;
  author?: String;
  tags?: ArticleUpdatetagsInput;
  images?: ArticleUpdateimagesInput;
  sections?: ArticleSectionUpdateManyWithoutArticlesInput;
}

export interface PlaylistItemCreateWithoutPlayListInput {
  dateAdded?: DateTimeInput;
  metadata?: Json;
  video: VideoCreateOneWithoutPlayListItemsInput;
}

export interface ArticleUpsertWithWhereUniqueWithoutServiceInput {
  where: ArticleWhereUniqueInput;
  update: ArticleUpdateWithoutServiceDataInput;
  create: ArticleCreateWithoutServiceInput;
}

export interface VideoCreateWithoutPlayListItemsInput {
  name: String;
  description?: String;
  datePublished?: DateTimeInput;
  dateFirstPublished?: DateTimeInput;
  paid?: Boolean;
  sourceId: String;
  sourceType: SOURCE_TYPE;
  tags?: VideoCreatetagsInput;
  metadata?: Json;
  service: ServiceCreateOneWithoutVideosInput;
}

export interface ArticleScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  headline?: String;
  headline_not?: String;
  headline_in?: String[] | String;
  headline_not_in?: String[] | String;
  headline_lt?: String;
  headline_lte?: String;
  headline_gt?: String;
  headline_gte?: String;
  headline_contains?: String;
  headline_not_contains?: String;
  headline_starts_with?: String;
  headline_not_starts_with?: String;
  headline_ends_with?: String;
  headline_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  datePublished?: DateTimeInput;
  datePublished_not?: DateTimeInput;
  datePublished_in?: DateTimeInput[] | DateTimeInput;
  datePublished_not_in?: DateTimeInput[] | DateTimeInput;
  datePublished_lt?: DateTimeInput;
  datePublished_lte?: DateTimeInput;
  datePublished_gt?: DateTimeInput;
  datePublished_gte?: DateTimeInput;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  author?: String;
  author_not?: String;
  author_in?: String[] | String;
  author_not_in?: String[] | String;
  author_lt?: String;
  author_lte?: String;
  author_gt?: String;
  author_gte?: String;
  author_contains?: String;
  author_not_contains?: String;
  author_starts_with?: String;
  author_not_starts_with?: String;
  author_ends_with?: String;
  author_not_ends_with?: String;
  AND?: ArticleScalarWhereInput[] | ArticleScalarWhereInput;
  OR?: ArticleScalarWhereInput[] | ArticleScalarWhereInput;
  NOT?: ArticleScalarWhereInput[] | ArticleScalarWhereInput;
}

export interface ServiceCreateOneWithoutVideosInput {
  create?: ServiceCreateWithoutVideosInput;
  connect?: ServiceWhereUniqueInput;
}

export interface ArticleUpdateManyWithWhereNestedInput {
  where: ArticleScalarWhereInput;
  data: ArticleUpdateManyDataInput;
}

export interface ArticleCreateManyWithoutServiceInput {
  create?:
    | ArticleCreateWithoutServiceInput[]
    | ArticleCreateWithoutServiceInput;
  connect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
}

export interface ArticleUpdateManyDataInput {
  url?: String;
  headline?: String;
  description?: String;
  datePublished?: DateTimeInput;
  body?: String;
  author?: String;
  tags?: ArticleUpdatetagsInput;
  images?: ArticleUpdateimagesInput;
}

export interface UserCreateOneWithoutPlaylistsInput {
  create?: UserCreateWithoutPlaylistsInput;
  connect?: UserWhereUniqueInput;
}

export interface ServiceUpsertWithoutVideosInput {
  update: ServiceUpdateWithoutVideosDataInput;
  create: ServiceCreateWithoutVideosInput;
}

export interface ServiceCreateManyWithoutUsersInput {
  create?: ServiceCreateWithoutUsersInput[] | ServiceCreateWithoutUsersInput;
  connect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
}

export interface VideoUpsertWithoutPlayListItemsInput {
  update: VideoUpdateWithoutPlayListItemsDataInput;
  create: VideoCreateWithoutPlayListItemsInput;
}

export interface VideoCreateManyWithoutServiceInput {
  create?: VideoCreateWithoutServiceInput[] | VideoCreateWithoutServiceInput;
  connect?: VideoWhereUniqueInput[] | VideoWhereUniqueInput;
}

export interface PlaylistItemUpsertWithWhereUniqueWithoutPlayListInput {
  where: PlaylistItemWhereUniqueInput;
  update: PlaylistItemUpdateWithoutPlayListDataInput;
  create: PlaylistItemCreateWithoutPlayListInput;
}

export interface PlaylistItemCreateManyWithoutVideoInput {
  create?:
    | PlaylistItemCreateWithoutVideoInput[]
    | PlaylistItemCreateWithoutVideoInput;
  connect?: PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput;
}

export interface PlaylistItemScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  dateAdded?: DateTimeInput;
  dateAdded_not?: DateTimeInput;
  dateAdded_in?: DateTimeInput[] | DateTimeInput;
  dateAdded_not_in?: DateTimeInput[] | DateTimeInput;
  dateAdded_lt?: DateTimeInput;
  dateAdded_lte?: DateTimeInput;
  dateAdded_gt?: DateTimeInput;
  dateAdded_gte?: DateTimeInput;
  AND?: PlaylistItemScalarWhereInput[] | PlaylistItemScalarWhereInput;
  OR?: PlaylistItemScalarWhereInput[] | PlaylistItemScalarWhereInput;
  NOT?: PlaylistItemScalarWhereInput[] | PlaylistItemScalarWhereInput;
}

export interface PlaylistCreateOneWithoutItemsInput {
  create?: PlaylistCreateWithoutItemsInput;
  connect?: PlaylistWhereUniqueInput;
}

export interface PlaylistItemUpdateManyWithWhereNestedInput {
  where: PlaylistItemScalarWhereInput;
  data: PlaylistItemUpdateManyDataInput;
}

export interface PlaylistCreateManyWithoutParentInput {
  create?:
    | PlaylistCreateWithoutParentInput[]
    | PlaylistCreateWithoutParentInput;
  connect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
}

export interface PlaylistItemUpdateManyDataInput {
  dateAdded?: DateTimeInput;
  metadata?: Json;
}

export interface ServiceCreateOneInput {
  create?: ServiceCreateInput;
  connect?: ServiceWhereUniqueInput;
}

export interface UserUpdateOneWithoutPlaylistsInput {
  create?: UserCreateWithoutPlaylistsInput;
  update?: UserUpdateWithoutPlaylistsDataInput;
  upsert?: UserUpsertWithoutPlaylistsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface ArticleUpdateInput {
  url?: String;
  headline?: String;
  description?: String;
  datePublished?: DateTimeInput;
  body?: String;
  author?: String;
  tags?: ArticleUpdatetagsInput;
  images?: ArticleUpdateimagesInput;
  sections?: ArticleSectionUpdateManyWithoutArticlesInput;
  service?: ServiceUpdateOneRequiredWithoutArticlesInput;
}

export interface UserUpdateWithoutPlaylistsDataInput {
  email?: String;
  name?: String;
  services?: ServiceUpdateManyWithoutUsersInput;
}

export interface ServiceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: ID_Input;
  name_not?: ID_Input;
  name_in?: ID_Input[] | ID_Input;
  name_not_in?: ID_Input[] | ID_Input;
  name_lt?: ID_Input;
  name_lte?: ID_Input;
  name_gt?: ID_Input;
  name_gte?: ID_Input;
  name_contains?: ID_Input;
  name_not_contains?: ID_Input;
  name_starts_with?: ID_Input;
  name_not_starts_with?: ID_Input;
  name_ends_with?: ID_Input;
  name_not_ends_with?: ID_Input;
  language?: LANGUAGE;
  language_not?: LANGUAGE;
  language_in?: LANGUAGE[] | LANGUAGE;
  language_not_in?: LANGUAGE[] | LANGUAGE;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  liveUrl?: String;
  liveUrl_not?: String;
  liveUrl_in?: String[] | String;
  liveUrl_not_in?: String[] | String;
  liveUrl_lt?: String;
  liveUrl_lte?: String;
  liveUrl_gt?: String;
  liveUrl_gte?: String;
  liveUrl_contains?: String;
  liveUrl_not_contains?: String;
  liveUrl_starts_with?: String;
  liveUrl_not_starts_with?: String;
  liveUrl_ends_with?: String;
  liveUrl_not_ends_with?: String;
  videoUrl?: String;
  videoUrl_not?: String;
  videoUrl_in?: String[] | String;
  videoUrl_not_in?: String[] | String;
  videoUrl_lt?: String;
  videoUrl_lte?: String;
  videoUrl_gt?: String;
  videoUrl_gte?: String;
  videoUrl_contains?: String;
  videoUrl_not_contains?: String;
  videoUrl_starts_with?: String;
  videoUrl_not_starts_with?: String;
  videoUrl_ends_with?: String;
  videoUrl_not_ends_with?: String;
  videoRestUrl?: String;
  videoRestUrl_not?: String;
  videoRestUrl_in?: String[] | String;
  videoRestUrl_not_in?: String[] | String;
  videoRestUrl_lt?: String;
  videoRestUrl_lte?: String;
  videoRestUrl_gt?: String;
  videoRestUrl_gte?: String;
  videoRestUrl_contains?: String;
  videoRestUrl_not_contains?: String;
  videoRestUrl_starts_with?: String;
  videoRestUrl_not_starts_with?: String;
  videoRestUrl_ends_with?: String;
  videoRestUrl_not_ends_with?: String;
  articles_every?: ArticleWhereInput;
  articles_some?: ArticleWhereInput;
  articles_none?: ArticleWhereInput;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  videos_every?: VideoWhereInput;
  videos_some?: VideoWhereInput;
  videos_none?: VideoWhereInput;
  AND?: ServiceWhereInput[] | ServiceWhereInput;
  OR?: ServiceWhereInput[] | ServiceWhereInput;
  NOT?: ServiceWhereInput[] | ServiceWhereInput;
}

export interface ServiceUpdateManyWithoutUsersInput {
  create?: ServiceCreateWithoutUsersInput[] | ServiceCreateWithoutUsersInput;
  delete?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  connect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  disconnect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  update?:
    | ServiceUpdateWithWhereUniqueWithoutUsersInput[]
    | ServiceUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | ServiceUpsertWithWhereUniqueWithoutUsersInput[]
    | ServiceUpsertWithWhereUniqueWithoutUsersInput;
  deleteMany?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
  updateMany?:
    | ServiceUpdateManyWithWhereNestedInput[]
    | ServiceUpdateManyWithWhereNestedInput;
}

export interface ServiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceWhereInput;
  AND?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  OR?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  NOT?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
}

export interface ServiceUpdateWithWhereUniqueWithoutUsersInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateWithoutUsersDataInput;
}

export interface ArticleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ArticleWhereInput;
  AND?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput;
  OR?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput;
  NOT?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput;
}

export interface ServiceUpdateWithoutUsersDataInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleUpdateManyWithoutServiceInput;
  videos?: VideoUpdateManyWithoutServiceInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
}

export interface VideoUpdateManyWithoutServiceInput {
  create?: VideoCreateWithoutServiceInput[] | VideoCreateWithoutServiceInput;
  delete?: VideoWhereUniqueInput[] | VideoWhereUniqueInput;
  connect?: VideoWhereUniqueInput[] | VideoWhereUniqueInput;
  disconnect?: VideoWhereUniqueInput[] | VideoWhereUniqueInput;
  update?:
    | VideoUpdateWithWhereUniqueWithoutServiceInput[]
    | VideoUpdateWithWhereUniqueWithoutServiceInput;
  upsert?:
    | VideoUpsertWithWhereUniqueWithoutServiceInput[]
    | VideoUpsertWithWhereUniqueWithoutServiceInput;
  deleteMany?: VideoScalarWhereInput[] | VideoScalarWhereInput;
  updateMany?:
    | VideoUpdateManyWithWhereNestedInput[]
    | VideoUpdateManyWithWhereNestedInput;
}

export interface ServiceUpdateManyMutationInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
}

export interface VideoUpdateWithWhereUniqueWithoutServiceInput {
  where: VideoWhereUniqueInput;
  data: VideoUpdateWithoutServiceDataInput;
}

export interface PlaylistItemUpdateInput {
  dateAdded?: DateTimeInput;
  metadata?: Json;
  playList?: PlaylistUpdateOneRequiredWithoutItemsInput;
  video?: VideoUpdateOneRequiredWithoutPlayListItemsInput;
}

export interface VideoUpdateWithoutServiceDataInput {
  name?: String;
  description?: String;
  datePublished?: DateTimeInput;
  dateFirstPublished?: DateTimeInput;
  paid?: Boolean;
  sourceId?: String;
  sourceType?: SOURCE_TYPE;
  tags?: VideoUpdatetagsInput;
  metadata?: Json;
  playListItems?: PlaylistItemUpdateManyWithoutVideoInput;
}

export interface PlaylistUpdateInput {
  name?: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
  parent?: PlaylistUpdateOneWithoutChildrenInput;
  children?: PlaylistUpdateManyWithoutParentInput;
  items?: PlaylistItemUpdateManyWithoutPlayListInput;
  user?: UserUpdateOneWithoutPlaylistsInput;
  service?: ServiceUpdateOneRequiredInput;
}

export interface PlaylistItemUpdateManyWithoutVideoInput {
  create?:
    | PlaylistItemCreateWithoutVideoInput[]
    | PlaylistItemCreateWithoutVideoInput;
  delete?: PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput;
  connect?: PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput;
  disconnect?: PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput;
  update?:
    | PlaylistItemUpdateWithWhereUniqueWithoutVideoInput[]
    | PlaylistItemUpdateWithWhereUniqueWithoutVideoInput;
  upsert?:
    | PlaylistItemUpsertWithWhereUniqueWithoutVideoInput[]
    | PlaylistItemUpsertWithWhereUniqueWithoutVideoInput;
  deleteMany?: PlaylistItemScalarWhereInput[] | PlaylistItemScalarWhereInput;
  updateMany?:
    | PlaylistItemUpdateManyWithWhereNestedInput[]
    | PlaylistItemUpdateManyWithWhereNestedInput;
}

export interface ArticleUpsertWithWhereUniqueWithoutSectionsInput {
  where: ArticleWhereUniqueInput;
  update: ArticleUpdateWithoutSectionsDataInput;
  create: ArticleCreateWithoutSectionsInput;
}

export interface PlaylistItemUpdateWithWhereUniqueWithoutVideoInput {
  where: PlaylistItemWhereUniqueInput;
  data: PlaylistItemUpdateWithoutVideoDataInput;
}

export interface ArticleUpdateManyWithoutSectionsInput {
  create?:
    | ArticleCreateWithoutSectionsInput[]
    | ArticleCreateWithoutSectionsInput;
  delete?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  connect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  disconnect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  update?:
    | ArticleUpdateWithWhereUniqueWithoutSectionsInput[]
    | ArticleUpdateWithWhereUniqueWithoutSectionsInput;
  upsert?:
    | ArticleUpsertWithWhereUniqueWithoutSectionsInput[]
    | ArticleUpsertWithWhereUniqueWithoutSectionsInput;
  deleteMany?: ArticleScalarWhereInput[] | ArticleScalarWhereInput;
  updateMany?:
    | ArticleUpdateManyWithWhereNestedInput[]
    | ArticleUpdateManyWithWhereNestedInput;
}

export interface PlaylistItemUpdateWithoutVideoDataInput {
  dateAdded?: DateTimeInput;
  metadata?: Json;
  playList?: PlaylistUpdateOneRequiredWithoutItemsInput;
}

export interface ArticleCreateManyWithoutSectionsInput {
  create?:
    | ArticleCreateWithoutSectionsInput[]
    | ArticleCreateWithoutSectionsInput;
  connect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
}

export interface PlaylistUpdateOneRequiredWithoutItemsInput {
  create?: PlaylistCreateWithoutItemsInput;
  update?: PlaylistUpdateWithoutItemsDataInput;
  upsert?: PlaylistUpsertWithoutItemsInput;
  connect?: PlaylistWhereUniqueInput;
}

export interface ArticleCreatetagsInput {
  set?: String[] | String;
}

export interface PlaylistUpdateWithoutItemsDataInput {
  name?: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
  parent?: PlaylistUpdateOneWithoutChildrenInput;
  children?: PlaylistUpdateManyWithoutParentInput;
  user?: UserUpdateOneWithoutPlaylistsInput;
  service?: ServiceUpdateOneRequiredInput;
}

export interface ServiceCreateOneWithoutArticlesInput {
  create?: ServiceCreateWithoutArticlesInput;
  connect?: ServiceWhereUniqueInput;
}

export interface PlaylistUpdateManyWithoutParentInput {
  create?:
    | PlaylistCreateWithoutParentInput[]
    | PlaylistCreateWithoutParentInput;
  delete?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  connect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  disconnect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  update?:
    | PlaylistUpdateWithWhereUniqueWithoutParentInput[]
    | PlaylistUpdateWithWhereUniqueWithoutParentInput;
  upsert?:
    | PlaylistUpsertWithWhereUniqueWithoutParentInput[]
    | PlaylistUpsertWithWhereUniqueWithoutParentInput;
  deleteMany?: PlaylistScalarWhereInput[] | PlaylistScalarWhereInput;
  updateMany?:
    | PlaylistUpdateManyWithWhereNestedInput[]
    | PlaylistUpdateManyWithWhereNestedInput;
}

export interface PlaylistCreateManyWithoutUserInput {
  create?: PlaylistCreateWithoutUserInput[] | PlaylistCreateWithoutUserInput;
  connect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
}

export interface PlaylistUpdateWithWhereUniqueWithoutParentInput {
  where: PlaylistWhereUniqueInput;
  data: PlaylistUpdateWithoutParentDataInput;
}

export interface PlaylistItemCreateManyWithoutPlayListInput {
  create?:
    | PlaylistItemCreateWithoutPlayListInput[]
    | PlaylistItemCreateWithoutPlayListInput;
  connect?: PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput;
}

export interface PlaylistUpdateWithoutParentDataInput {
  name?: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
  children?: PlaylistUpdateManyWithoutParentInput;
  items?: PlaylistItemUpdateManyWithoutPlayListInput;
  user?: UserUpdateOneWithoutPlaylistsInput;
  service?: ServiceUpdateOneRequiredInput;
}

export interface VideoCreatetagsInput {
  set?: String[] | String;
}

export interface ServiceUpdateOneRequiredInput {
  create?: ServiceCreateInput;
  update?: ServiceUpdateDataInput;
  upsert?: ServiceUpsertNestedInput;
  connect?: ServiceWhereUniqueInput;
}

export interface ArticleCreateWithoutServiceInput {
  url: String;
  headline: String;
  description?: String;
  datePublished: DateTimeInput;
  body: String;
  author?: String;
  tags?: ArticleCreatetagsInput;
  images?: ArticleCreateimagesInput;
  sections?: ArticleSectionCreateManyWithoutArticlesInput;
}

export interface ServiceUpdateDataInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleUpdateManyWithoutServiceInput;
  users?: UserUpdateManyWithoutServicesInput;
  videos?: VideoUpdateManyWithoutServiceInput;
}

export interface ServiceCreateWithoutUsersInput {
  name: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleCreateManyWithoutServiceInput;
  videos?: VideoCreateManyWithoutServiceInput;
}

export interface ServiceUpsertNestedInput {
  update: ServiceUpdateDataInput;
  create: ServiceCreateInput;
}

export interface PlaylistItemCreateWithoutVideoInput {
  dateAdded?: DateTimeInput;
  metadata?: Json;
  playList: PlaylistCreateOneWithoutItemsInput;
}

export interface PlaylistUpsertWithWhereUniqueWithoutParentInput {
  where: PlaylistWhereUniqueInput;
  update: PlaylistUpdateWithoutParentDataInput;
  create: PlaylistCreateWithoutParentInput;
}

export interface PlaylistCreateWithoutParentInput {
  name: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
  children?: PlaylistCreateManyWithoutParentInput;
  items?: PlaylistItemCreateManyWithoutPlayListInput;
  user?: UserCreateOneWithoutPlaylistsInput;
  service: ServiceCreateOneInput;
}

export interface PlaylistScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  childrenName?: String;
  childrenName_not?: String;
  childrenName_in?: String[] | String;
  childrenName_not_in?: String[] | String;
  childrenName_lt?: String;
  childrenName_lte?: String;
  childrenName_gt?: String;
  childrenName_gte?: String;
  childrenName_contains?: String;
  childrenName_not_contains?: String;
  childrenName_starts_with?: String;
  childrenName_not_starts_with?: String;
  childrenName_ends_with?: String;
  childrenName_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  AND?: PlaylistScalarWhereInput[] | PlaylistScalarWhereInput;
  OR?: PlaylistScalarWhereInput[] | PlaylistScalarWhereInput;
  NOT?: PlaylistScalarWhereInput[] | PlaylistScalarWhereInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  services_every?: ServiceWhereInput;
  services_some?: ServiceWhereInput;
  services_none?: ServiceWhereInput;
  playlists_every?: PlaylistWhereInput;
  playlists_some?: PlaylistWhereInput;
  playlists_none?: PlaylistWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface PlaylistUpdateManyWithWhereNestedInput {
  where: PlaylistScalarWhereInput;
  data: PlaylistUpdateManyDataInput;
}

export interface PlaylistSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlaylistWhereInput;
  AND?: PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput;
  OR?: PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput;
  NOT?: PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput;
}

export interface PlaylistUpdateManyDataInput {
  name?: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
}

export type ArticleSectionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface PlaylistUpsertWithoutItemsInput {
  update: PlaylistUpdateWithoutItemsDataInput;
  create: PlaylistCreateWithoutItemsInput;
}

export type PlaylistItemWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface PlaylistItemUpsertWithWhereUniqueWithoutVideoInput {
  where: PlaylistItemWhereUniqueInput;
  update: PlaylistItemUpdateWithoutVideoDataInput;
  create: PlaylistItemCreateWithoutVideoInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface VideoUpsertWithWhereUniqueWithoutServiceInput {
  where: VideoWhereUniqueInput;
  update: VideoUpdateWithoutServiceDataInput;
  create: VideoCreateWithoutServiceInput;
}

export interface UserCreateManyWithoutServicesInput {
  create?: UserCreateWithoutServicesInput[] | UserCreateWithoutServicesInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface VideoScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  datePublished?: DateTimeInput;
  datePublished_not?: DateTimeInput;
  datePublished_in?: DateTimeInput[] | DateTimeInput;
  datePublished_not_in?: DateTimeInput[] | DateTimeInput;
  datePublished_lt?: DateTimeInput;
  datePublished_lte?: DateTimeInput;
  datePublished_gt?: DateTimeInput;
  datePublished_gte?: DateTimeInput;
  dateFirstPublished?: DateTimeInput;
  dateFirstPublished_not?: DateTimeInput;
  dateFirstPublished_in?: DateTimeInput[] | DateTimeInput;
  dateFirstPublished_not_in?: DateTimeInput[] | DateTimeInput;
  dateFirstPublished_lt?: DateTimeInput;
  dateFirstPublished_lte?: DateTimeInput;
  dateFirstPublished_gt?: DateTimeInput;
  dateFirstPublished_gte?: DateTimeInput;
  paid?: Boolean;
  paid_not?: Boolean;
  sourceId?: String;
  sourceId_not?: String;
  sourceId_in?: String[] | String;
  sourceId_not_in?: String[] | String;
  sourceId_lt?: String;
  sourceId_lte?: String;
  sourceId_gt?: String;
  sourceId_gte?: String;
  sourceId_contains?: String;
  sourceId_not_contains?: String;
  sourceId_starts_with?: String;
  sourceId_not_starts_with?: String;
  sourceId_ends_with?: String;
  sourceId_not_ends_with?: String;
  sourceType?: SOURCE_TYPE;
  sourceType_not?: SOURCE_TYPE;
  sourceType_in?: SOURCE_TYPE[] | SOURCE_TYPE;
  sourceType_not_in?: SOURCE_TYPE[] | SOURCE_TYPE;
  AND?: VideoScalarWhereInput[] | VideoScalarWhereInput;
  OR?: VideoScalarWhereInput[] | VideoScalarWhereInput;
  NOT?: VideoScalarWhereInput[] | VideoScalarWhereInput;
}

export interface VideoCreateOneWithoutPlayListItemsInput {
  create?: VideoCreateWithoutPlayListItemsInput;
  connect?: VideoWhereUniqueInput;
}

export interface VideoUpdateManyWithWhereNestedInput {
  where: VideoScalarWhereInput;
  data: VideoUpdateManyDataInput;
}

export interface UserCreateWithoutPlaylistsInput {
  email: String;
  name?: String;
  services?: ServiceCreateManyWithoutUsersInput;
}

export interface VideoUpdateManyDataInput {
  name?: String;
  description?: String;
  datePublished?: DateTimeInput;
  dateFirstPublished?: DateTimeInput;
  paid?: Boolean;
  sourceId?: String;
  sourceType?: SOURCE_TYPE;
  tags?: VideoUpdatetagsInput;
  metadata?: Json;
}

export interface PlaylistCreateWithoutItemsInput {
  name: String;
  childrenName?: String;
  description?: String;
  metadata?: Json;
  parent?: PlaylistCreateOneWithoutChildrenInput;
  children?: PlaylistCreateManyWithoutParentInput;
  user?: UserCreateOneWithoutPlaylistsInput;
  service: ServiceCreateOneInput;
}

export interface ServiceUpsertWithWhereUniqueWithoutUsersInput {
  where: ServiceWhereUniqueInput;
  update: ServiceUpdateWithoutUsersDataInput;
  create: ServiceCreateWithoutUsersInput;
}

export interface ArticleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  headline?: String;
  headline_not?: String;
  headline_in?: String[] | String;
  headline_not_in?: String[] | String;
  headline_lt?: String;
  headline_lte?: String;
  headline_gt?: String;
  headline_gte?: String;
  headline_contains?: String;
  headline_not_contains?: String;
  headline_starts_with?: String;
  headline_not_starts_with?: String;
  headline_ends_with?: String;
  headline_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  datePublished?: DateTimeInput;
  datePublished_not?: DateTimeInput;
  datePublished_in?: DateTimeInput[] | DateTimeInput;
  datePublished_not_in?: DateTimeInput[] | DateTimeInput;
  datePublished_lt?: DateTimeInput;
  datePublished_lte?: DateTimeInput;
  datePublished_gt?: DateTimeInput;
  datePublished_gte?: DateTimeInput;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  author?: String;
  author_not?: String;
  author_in?: String[] | String;
  author_not_in?: String[] | String;
  author_lt?: String;
  author_lte?: String;
  author_gt?: String;
  author_gte?: String;
  author_contains?: String;
  author_not_contains?: String;
  author_starts_with?: String;
  author_not_starts_with?: String;
  author_ends_with?: String;
  author_not_ends_with?: String;
  sections_every?: ArticleSectionWhereInput;
  sections_some?: ArticleSectionWhereInput;
  sections_none?: ArticleSectionWhereInput;
  service?: ServiceWhereInput;
  AND?: ArticleWhereInput[] | ArticleWhereInput;
  OR?: ArticleWhereInput[] | ArticleWhereInput;
  NOT?: ArticleWhereInput[] | ArticleWhereInput;
}

export interface ServiceScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: ID_Input;
  name_not?: ID_Input;
  name_in?: ID_Input[] | ID_Input;
  name_not_in?: ID_Input[] | ID_Input;
  name_lt?: ID_Input;
  name_lte?: ID_Input;
  name_gt?: ID_Input;
  name_gte?: ID_Input;
  name_contains?: ID_Input;
  name_not_contains?: ID_Input;
  name_starts_with?: ID_Input;
  name_not_starts_with?: ID_Input;
  name_ends_with?: ID_Input;
  name_not_ends_with?: ID_Input;
  language?: LANGUAGE;
  language_not?: LANGUAGE;
  language_in?: LANGUAGE[] | LANGUAGE;
  language_not_in?: LANGUAGE[] | LANGUAGE;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  liveUrl?: String;
  liveUrl_not?: String;
  liveUrl_in?: String[] | String;
  liveUrl_not_in?: String[] | String;
  liveUrl_lt?: String;
  liveUrl_lte?: String;
  liveUrl_gt?: String;
  liveUrl_gte?: String;
  liveUrl_contains?: String;
  liveUrl_not_contains?: String;
  liveUrl_starts_with?: String;
  liveUrl_not_starts_with?: String;
  liveUrl_ends_with?: String;
  liveUrl_not_ends_with?: String;
  videoUrl?: String;
  videoUrl_not?: String;
  videoUrl_in?: String[] | String;
  videoUrl_not_in?: String[] | String;
  videoUrl_lt?: String;
  videoUrl_lte?: String;
  videoUrl_gt?: String;
  videoUrl_gte?: String;
  videoUrl_contains?: String;
  videoUrl_not_contains?: String;
  videoUrl_starts_with?: String;
  videoUrl_not_starts_with?: String;
  videoUrl_ends_with?: String;
  videoUrl_not_ends_with?: String;
  videoRestUrl?: String;
  videoRestUrl_not?: String;
  videoRestUrl_in?: String[] | String;
  videoRestUrl_not_in?: String[] | String;
  videoRestUrl_lt?: String;
  videoRestUrl_lte?: String;
  videoRestUrl_gt?: String;
  videoRestUrl_gte?: String;
  videoRestUrl_contains?: String;
  videoRestUrl_not_contains?: String;
  videoRestUrl_starts_with?: String;
  videoRestUrl_not_starts_with?: String;
  videoRestUrl_ends_with?: String;
  videoRestUrl_not_ends_with?: String;
  AND?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
  OR?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
  NOT?: ServiceScalarWhereInput[] | ServiceScalarWhereInput;
}

export type PlaylistWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ServiceUpdateManyWithWhereNestedInput {
  where: ServiceScalarWhereInput;
  data: ServiceUpdateManyDataInput;
}

export type VideoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  sourceId?: String;
}>;

export interface ServiceUpdateManyDataInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
}

export interface PlaylistCreateOneWithoutChildrenInput {
  create?: PlaylistCreateWithoutChildrenInput;
  connect?: PlaylistWhereUniqueInput;
}

export interface UserUpsertWithoutPlaylistsInput {
  update: UserUpdateWithoutPlaylistsDataInput;
  create: UserCreateWithoutPlaylistsInput;
}

export interface VideoCreateWithoutServiceInput {
  name: String;
  description?: String;
  datePublished?: DateTimeInput;
  dateFirstPublished?: DateTimeInput;
  paid?: Boolean;
  sourceId: String;
  sourceType: SOURCE_TYPE;
  tags?: VideoCreatetagsInput;
  metadata?: Json;
  playListItems?: PlaylistItemCreateManyWithoutVideoInput;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface UserUpsertWithWhereUniqueWithoutServicesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutServicesDataInput;
  create: UserCreateWithoutServicesInput;
}

export interface PlaylistUpsertWithWhereUniqueWithoutUserInput {
  where: PlaylistWhereUniqueInput;
  update: PlaylistUpdateWithoutUserDataInput;
  create: PlaylistCreateWithoutUserInput;
}

export interface PlaylistUpsertWithoutChildrenInput {
  update: PlaylistUpdateWithoutChildrenDataInput;
  create: PlaylistCreateWithoutChildrenInput;
}

export interface ServiceCreateInput {
  name: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleCreateManyWithoutServiceInput;
  users?: UserCreateManyWithoutServicesInput;
  videos?: VideoCreateManyWithoutServiceInput;
}

export interface ServiceCreateWithoutVideosInput {
  name: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleCreateManyWithoutServiceInput;
  users?: UserCreateManyWithoutServicesInput;
}

export interface ArticleSectionCreateManyWithoutArticlesInput {
  create?:
    | ArticleSectionCreateWithoutArticlesInput[]
    | ArticleSectionCreateWithoutArticlesInput;
  connect?: ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput;
}

export type ServiceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: ID_Input;
}>;

export interface VideoUpdateInput {
  name?: String;
  description?: String;
  datePublished?: DateTimeInput;
  dateFirstPublished?: DateTimeInput;
  paid?: Boolean;
  sourceId?: String;
  sourceType?: SOURCE_TYPE;
  tags?: VideoUpdatetagsInput;
  metadata?: Json;
  playListItems?: PlaylistItemUpdateManyWithoutVideoInput;
  service?: ServiceUpdateOneRequiredWithoutVideosInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VideoPreviousValues {
  id: ID_Output;
  name: String;
  description?: String;
  datePublished?: DateTimeOutput;
  dateFirstPublished?: DateTimeOutput;
  paid: Boolean;
  sourceId: String;
  sourceType: SOURCE_TYPE;
  tags: String[];
  metadata: Json;
}

export interface VideoPreviousValuesPromise
  extends Promise<VideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  dateFirstPublished: () => Promise<DateTimeOutput>;
  paid: () => Promise<Boolean>;
  sourceId: () => Promise<String>;
  sourceType: () => Promise<SOURCE_TYPE>;
  tags: () => Promise<String[]>;
  metadata: () => Promise<Json>;
}

export interface VideoPreviousValuesSubscription
  extends Promise<AsyncIterator<VideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  datePublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateFirstPublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  paid: () => Promise<AsyncIterator<Boolean>>;
  sourceId: () => Promise<AsyncIterator<String>>;
  sourceType: () => Promise<AsyncIterator<SOURCE_TYPE>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  metadata: () => Promise<AsyncIterator<Json>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleSection {
  id: ID_Output;
  name: String;
}

export interface ArticleSectionPromise
  extends Promise<ArticleSection>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  articles: <T = FragmentableArray<Article>>(
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ArticleSectionSubscription
  extends Promise<AsyncIterator<ArticleSection>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  articles: <T = Promise<AsyncIterator<ArticleSubscription>>>(
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateArticle {
  count: Int;
}

export interface AggregateArticlePromise
  extends Promise<AggregateArticle>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleSubscription
  extends Promise<AsyncIterator<AggregateArticle>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServicePreviousValues {
  id: ID_Output;
  name: ID_Output;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
}

export interface ServicePreviousValuesPromise
  extends Promise<ServicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ID_Output>;
  language: () => Promise<LANGUAGE>;
  url: () => Promise<String>;
  liveUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  videoRestUrl: () => Promise<String>;
}

export interface ServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ServicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<ID_Output>>;
  language: () => Promise<AsyncIterator<LANGUAGE>>;
  url: () => Promise<AsyncIterator<String>>;
  liveUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  videoRestUrl: () => Promise<AsyncIterator<String>>;
}

export interface ArticleEdge {
  cursor: String;
}

export interface ArticleEdgePromise extends Promise<ArticleEdge>, Fragmentable {
  node: <T = ArticlePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleEdgeSubscription
  extends Promise<AsyncIterator<ArticleEdge>>,
    Fragmentable {
  node: <T = ArticleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleConnection {}

export interface ArticleConnectionPromise
  extends Promise<ArticleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleEdge>>() => T;
  aggregate: <T = AggregateArticlePromise>() => T;
}

export interface ArticleConnectionSubscription
  extends Promise<AsyncIterator<ArticleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticleSubscription>() => T;
}

export interface Service {
  id: ID_Output;
  name: ID_Output;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
}

export interface ServicePromise extends Promise<Service>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ID_Output>;
  language: () => Promise<LANGUAGE>;
  url: () => Promise<String>;
  liveUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  videoRestUrl: () => Promise<String>;
  articles: <T = FragmentableArray<Article>>(
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  videos: <T = FragmentableArray<Video>>(
    args?: {
      where?: VideoWhereInput;
      orderBy?: VideoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ServiceSubscription
  extends Promise<AsyncIterator<Service>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<ID_Output>>;
  language: () => Promise<AsyncIterator<LANGUAGE>>;
  url: () => Promise<AsyncIterator<String>>;
  liveUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  videoRestUrl: () => Promise<AsyncIterator<String>>;
  articles: <T = Promise<AsyncIterator<ArticleSubscription>>>(
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  videos: <T = Promise<AsyncIterator<VideoSubscription>>>(
    args?: {
      where?: VideoWhereInput;
      orderBy?: VideoOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateVideo {
  count: Int;
}

export interface AggregateVideoPromise
  extends Promise<AggregateVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVideoSubscription
  extends Promise<AsyncIterator<AggregateVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VideoConnection {}

export interface VideoConnectionPromise
  extends Promise<VideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VideoEdge>>() => T;
  aggregate: <T = AggregateVideoPromise>() => T;
}

export interface VideoConnectionSubscription
  extends Promise<AsyncIterator<VideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVideoSubscription>() => T;
}

export interface Article {
  id: ID_Output;
  url: String;
  headline: String;
  description?: String;
  datePublished: DateTimeOutput;
  body: String;
  author?: String;
  tags: String[];
  images: String[];
}

export interface ArticlePromise extends Promise<Article>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  headline: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  body: () => Promise<String>;
  author: () => Promise<String>;
  tags: () => Promise<String[]>;
  images: () => Promise<String[]>;
  sections: <T = FragmentableArray<ArticleSection>>(
    args?: {
      where?: ArticleSectionWhereInput;
      orderBy?: ArticleSectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  service: <T = ServicePromise>() => T;
}

export interface ArticleSubscription
  extends Promise<AsyncIterator<Article>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  headline: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  datePublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  body: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  images: () => Promise<AsyncIterator<String[]>>;
  sections: <T = Promise<AsyncIterator<ArticleSectionSubscription>>>(
    args?: {
      where?: ArticleSectionWhereInput;
      orderBy?: ArticleSectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  service: <T = ServiceSubscription>() => T;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Video {
  id: ID_Output;
  name: String;
  description?: String;
  datePublished?: DateTimeOutput;
  dateFirstPublished?: DateTimeOutput;
  paid: Boolean;
  sourceId: String;
  sourceType: SOURCE_TYPE;
  tags: String[];
  metadata: Json;
}

export interface VideoPromise extends Promise<Video>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  dateFirstPublished: () => Promise<DateTimeOutput>;
  paid: () => Promise<Boolean>;
  sourceId: () => Promise<String>;
  sourceType: () => Promise<SOURCE_TYPE>;
  tags: () => Promise<String[]>;
  metadata: () => Promise<Json>;
  playListItems: <T = FragmentableArray<PlaylistItem>>(
    args?: {
      where?: PlaylistItemWhereInput;
      orderBy?: PlaylistItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  service: <T = ServicePromise>() => T;
}

export interface VideoSubscription
  extends Promise<AsyncIterator<Video>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  datePublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateFirstPublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  paid: () => Promise<AsyncIterator<Boolean>>;
  sourceId: () => Promise<AsyncIterator<String>>;
  sourceType: () => Promise<AsyncIterator<SOURCE_TYPE>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  metadata: () => Promise<AsyncIterator<Json>>;
  playListItems: <T = Promise<AsyncIterator<PlaylistItemSubscription>>>(
    args?: {
      where?: PlaylistItemWhereInput;
      orderBy?: PlaylistItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  service: <T = ServiceSubscription>() => T;
}

export interface AggregateService {
  count: Int;
}

export interface AggregateServicePromise
  extends Promise<AggregateService>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceSubscription
  extends Promise<AsyncIterator<AggregateService>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ServiceConnection {}

export interface ServiceConnectionPromise
  extends Promise<ServiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceEdge>>() => T;
  aggregate: <T = AggregateServicePromise>() => T;
}

export interface ServiceConnectionSubscription
  extends Promise<AsyncIterator<ServiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceSubscription>() => T;
}

export interface ArticleSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ArticleSubscriptionPayloadPromise
  extends Promise<ArticleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticlePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticlePreviousValuesPromise>() => T;
}

export interface ArticleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticlePreviousValuesSubscription>() => T;
}

export interface PlaylistItemEdge {
  cursor: String;
}

export interface PlaylistItemEdgePromise
  extends Promise<PlaylistItemEdge>,
    Fragmentable {
  node: <T = PlaylistItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaylistItemEdgeSubscription
  extends Promise<AsyncIterator<PlaylistItemEdge>>,
    Fragmentable {
  node: <T = PlaylistItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticlePreviousValues {
  id: ID_Output;
  url: String;
  headline: String;
  description?: String;
  datePublished: DateTimeOutput;
  body: String;
  author?: String;
  tags: String[];
  images: String[];
}

export interface ArticlePreviousValuesPromise
  extends Promise<ArticlePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  headline: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  body: () => Promise<String>;
  author: () => Promise<String>;
  tags: () => Promise<String[]>;
  images: () => Promise<String[]>;
}

export interface ArticlePreviousValuesSubscription
  extends Promise<AsyncIterator<ArticlePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  headline: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  datePublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  body: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  images: () => Promise<AsyncIterator<String[]>>;
}

export interface AggregatePlaylist {
  count: Int;
}

export interface AggregatePlaylistPromise
  extends Promise<AggregatePlaylist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaylistSubscription
  extends Promise<AsyncIterator<AggregatePlaylist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlaylistItem {
  id: ID_Output;
  dateAdded?: DateTimeOutput;
  metadata: Json;
}

export interface PlaylistItemPromise
  extends Promise<PlaylistItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateAdded: () => Promise<DateTimeOutput>;
  metadata: () => Promise<Json>;
  playList: <T = PlaylistPromise>() => T;
  video: <T = VideoPromise>() => T;
}

export interface PlaylistItemSubscription
  extends Promise<AsyncIterator<PlaylistItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateAdded: () => Promise<AsyncIterator<DateTimeOutput>>;
  metadata: () => Promise<AsyncIterator<Json>>;
  playList: <T = PlaylistSubscription>() => T;
  video: <T = VideoSubscription>() => T;
}

export interface PlaylistConnection {}

export interface PlaylistConnectionPromise
  extends Promise<PlaylistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaylistEdge>>() => T;
  aggregate: <T = AggregatePlaylistPromise>() => T;
}

export interface PlaylistConnectionSubscription
  extends Promise<AsyncIterator<PlaylistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaylistEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaylistSubscription>() => T;
}

export interface ArticleSectionSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ArticleSectionSubscriptionPayloadPromise
  extends Promise<ArticleSectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticleSectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticleSectionPreviousValuesPromise>() => T;
}

export interface ArticleSectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleSectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleSectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticleSectionPreviousValuesSubscription>() => T;
}

export interface ArticleSectionEdge {
  cursor: String;
}

export interface ArticleSectionEdgePromise
  extends Promise<ArticleSectionEdge>,
    Fragmentable {
  node: <T = ArticleSectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleSectionEdgeSubscription
  extends Promise<AsyncIterator<ArticleSectionEdge>>,
    Fragmentable {
  node: <T = ArticleSectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleSectionPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ArticleSectionPreviousValuesPromise
  extends Promise<ArticleSectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ArticleSectionPreviousValuesSubscription
  extends Promise<AsyncIterator<ArticleSectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface VideoSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface VideoSubscriptionPayloadPromise
  extends Promise<VideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VideoPreviousValuesPromise>() => T;
}

export interface VideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VideoPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlaylistSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PlaylistSubscriptionPayloadPromise
  extends Promise<PlaylistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlaylistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlaylistPreviousValuesPromise>() => T;
}

export interface PlaylistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaylistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaylistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlaylistPreviousValuesSubscription>() => T;
}

export interface ServiceEdge {
  cursor: String;
}

export interface ServiceEdgePromise extends Promise<ServiceEdge>, Fragmentable {
  node: <T = ServicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceEdgeSubscription
  extends Promise<AsyncIterator<ServiceEdge>>,
    Fragmentable {
  node: <T = ServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaylistPreviousValues {
  id: ID_Output;
  name: String;
  childrenName?: String;
  description?: String;
  metadata: Json;
}

export interface PlaylistPreviousValuesPromise
  extends Promise<PlaylistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  childrenName: () => Promise<String>;
  description: () => Promise<String>;
  metadata: () => Promise<Json>;
}

export interface PlaylistPreviousValuesSubscription
  extends Promise<AsyncIterator<PlaylistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  childrenName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  metadata: () => Promise<AsyncIterator<Json>>;
}

export interface PlaylistItemConnection {}

export interface PlaylistItemConnectionPromise
  extends Promise<PlaylistItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaylistItemEdge>>() => T;
  aggregate: <T = AggregatePlaylistItemPromise>() => T;
}

export interface PlaylistItemConnectionSubscription
  extends Promise<AsyncIterator<PlaylistItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaylistItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaylistItemSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  name?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  services: <T = FragmentableArray<Service>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  playlists: <T = FragmentableArray<Playlist>>(
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  services: <T = Promise<AsyncIterator<ServiceSubscription>>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  playlists: <T = Promise<AsyncIterator<PlaylistSubscription>>>(
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateArticleSection {
  count: Int;
}

export interface AggregateArticleSectionPromise
  extends Promise<AggregateArticleSection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleSectionSubscription
  extends Promise<AsyncIterator<AggregateArticleSection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VideoEdge {
  cursor: String;
}

export interface VideoEdgePromise extends Promise<VideoEdge>, Fragmentable {
  node: <T = VideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VideoEdgeSubscription
  extends Promise<AsyncIterator<VideoEdge>>,
    Fragmentable {
  node: <T = VideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ServiceSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ServiceSubscriptionPayloadPromise
  extends Promise<ServiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServicePreviousValuesPromise>() => T;
}

export interface ServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServicePreviousValuesSubscription>() => T;
}

export interface Playlist {
  id: ID_Output;
  name: String;
  childrenName?: String;
  description?: String;
  metadata: Json;
}

export interface PlaylistPromise extends Promise<Playlist>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  childrenName: () => Promise<String>;
  description: () => Promise<String>;
  metadata: () => Promise<Json>;
  parent: <T = PlaylistPromise>() => T;
  children: <T = FragmentableArray<Playlist>>(
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  items: <T = FragmentableArray<PlaylistItem>>(
    args?: {
      where?: PlaylistItemWhereInput;
      orderBy?: PlaylistItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user: <T = UserPromise>() => T;
  service: <T = ServicePromise>() => T;
}

export interface PlaylistSubscription
  extends Promise<AsyncIterator<Playlist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  childrenName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  metadata: () => Promise<AsyncIterator<Json>>;
  parent: <T = PlaylistSubscription>() => T;
  children: <T = Promise<AsyncIterator<PlaylistSubscription>>>(
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  items: <T = Promise<AsyncIterator<PlaylistItemSubscription>>>(
    args?: {
      where?: PlaylistItemWhereInput;
      orderBy?: PlaylistItemOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  user: <T = UserSubscription>() => T;
  service: <T = ServiceSubscription>() => T;
}

export interface PlaylistItemPreviousValues {
  id: ID_Output;
  dateAdded?: DateTimeOutput;
  metadata: Json;
}

export interface PlaylistItemPreviousValuesPromise
  extends Promise<PlaylistItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  dateAdded: () => Promise<DateTimeOutput>;
  metadata: () => Promise<Json>;
}

export interface PlaylistItemPreviousValuesSubscription
  extends Promise<AsyncIterator<PlaylistItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  dateAdded: () => Promise<AsyncIterator<DateTimeOutput>>;
  metadata: () => Promise<AsyncIterator<Json>>;
}

export interface PlaylistItemSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PlaylistItemSubscriptionPayloadPromise
  extends Promise<PlaylistItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlaylistItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlaylistItemPreviousValuesPromise>() => T;
}

export interface PlaylistItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaylistItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaylistItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlaylistItemPreviousValuesSubscription>() => T;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ArticleSectionConnection {}

export interface ArticleSectionConnectionPromise
  extends Promise<ArticleSectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleSectionEdge>>() => T;
  aggregate: <T = AggregateArticleSectionPromise>() => T;
}

export interface ArticleSectionConnectionSubscription
  extends Promise<AsyncIterator<ArticleSectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticleSectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticleSectionSubscription>() => T;
}

export interface PlaylistEdge {
  cursor: String;
}

export interface PlaylistEdgePromise
  extends Promise<PlaylistEdge>,
    Fragmentable {
  node: <T = PlaylistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaylistEdgeSubscription
  extends Promise<AsyncIterator<PlaylistEdge>>,
    Fragmentable {
  node: <T = PlaylistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlaylistItem {
  count: Int;
}

export interface AggregatePlaylistItemPromise
  extends Promise<AggregatePlaylistItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaylistItemSubscription
  extends Promise<AsyncIterator<AggregatePlaylistItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Json = any;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Article",
    embedded: false
  },
  {
    name: "ArticleSection",
    embedded: false
  },
  {
    name: "LANGUAGE",
    embedded: false
  },
  {
    name: "Playlist",
    embedded: false
  },
  {
    name: "PlaylistItem",
    embedded: false
  },
  {
    name: "SOURCE_TYPE",
    embedded: false
  },
  {
    name: "Service",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Video",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
