// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  article: (where?: ArticleWhereInput) => Promise<boolean>;
  articleSection: (where?: ArticleSectionWhereInput) => Promise<boolean>;
  playlist: (where?: PlaylistWhereInput) => Promise<boolean>;
  playlistItem: (where?: PlaylistItemWhereInput) => Promise<boolean>;
  service: (where?: ServiceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  video: (where?: VideoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  article: (where: ArticleWhereUniqueInput) => ArticleNullablePromise;
  articles: (args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Article>;
  articlesConnection: (args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArticleConnectionPromise;
  articleSection: (
    where: ArticleSectionWhereUniqueInput
  ) => ArticleSectionNullablePromise;
  articleSections: (args?: {
    where?: ArticleSectionWhereInput;
    orderBy?: ArticleSectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<ArticleSection>;
  articleSectionsConnection: (args?: {
    where?: ArticleSectionWhereInput;
    orderBy?: ArticleSectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ArticleSectionConnectionPromise;
  playlist: (where: PlaylistWhereUniqueInput) => PlaylistNullablePromise;
  playlists: (args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Playlist>;
  playlistsConnection: (args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlaylistConnectionPromise;
  playlistItem: (
    where: PlaylistItemWhereUniqueInput
  ) => PlaylistItemNullablePromise;
  playlistItems: (args?: {
    where?: PlaylistItemWhereInput;
    orderBy?: PlaylistItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PlaylistItem>;
  playlistItemsConnection: (args?: {
    where?: PlaylistItemWhereInput;
    orderBy?: PlaylistItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PlaylistItemConnectionPromise;
  service: (where: ServiceWhereUniqueInput) => ServiceNullablePromise;
  services: (args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Service>;
  servicesConnection: (args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ServiceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  video: (where: VideoWhereUniqueInput) => VideoNullablePromise;
  videos: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Video>;
  videosConnection: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VideoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createArticle: (data: ArticleCreateInput) => ArticlePromise;
  updateArticle: (args: {
    data: ArticleUpdateInput;
    where: ArticleWhereUniqueInput;
  }) => ArticlePromise;
  updateManyArticles: (args: {
    data: ArticleUpdateManyMutationInput;
    where?: ArticleWhereInput;
  }) => BatchPayloadPromise;
  upsertArticle: (args: {
    where: ArticleWhereUniqueInput;
    create: ArticleCreateInput;
    update: ArticleUpdateInput;
  }) => ArticlePromise;
  deleteArticle: (where: ArticleWhereUniqueInput) => ArticlePromise;
  deleteManyArticles: (where?: ArticleWhereInput) => BatchPayloadPromise;
  createArticleSection: (
    data: ArticleSectionCreateInput
  ) => ArticleSectionPromise;
  updateArticleSection: (args: {
    data: ArticleSectionUpdateInput;
    where: ArticleSectionWhereUniqueInput;
  }) => ArticleSectionPromise;
  updateManyArticleSections: (args: {
    data: ArticleSectionUpdateManyMutationInput;
    where?: ArticleSectionWhereInput;
  }) => BatchPayloadPromise;
  upsertArticleSection: (args: {
    where: ArticleSectionWhereUniqueInput;
    create: ArticleSectionCreateInput;
    update: ArticleSectionUpdateInput;
  }) => ArticleSectionPromise;
  deleteArticleSection: (
    where: ArticleSectionWhereUniqueInput
  ) => ArticleSectionPromise;
  deleteManyArticleSections: (
    where?: ArticleSectionWhereInput
  ) => BatchPayloadPromise;
  createPlaylist: (data: PlaylistCreateInput) => PlaylistPromise;
  updatePlaylist: (args: {
    data: PlaylistUpdateInput;
    where: PlaylistWhereUniqueInput;
  }) => PlaylistPromise;
  updateManyPlaylists: (args: {
    data: PlaylistUpdateManyMutationInput;
    where?: PlaylistWhereInput;
  }) => BatchPayloadPromise;
  upsertPlaylist: (args: {
    where: PlaylistWhereUniqueInput;
    create: PlaylistCreateInput;
    update: PlaylistUpdateInput;
  }) => PlaylistPromise;
  deletePlaylist: (where: PlaylistWhereUniqueInput) => PlaylistPromise;
  deleteManyPlaylists: (where?: PlaylistWhereInput) => BatchPayloadPromise;
  createPlaylistItem: (data: PlaylistItemCreateInput) => PlaylistItemPromise;
  updatePlaylistItem: (args: {
    data: PlaylistItemUpdateInput;
    where: PlaylistItemWhereUniqueInput;
  }) => PlaylistItemPromise;
  updateManyPlaylistItems: (args: {
    data: PlaylistItemUpdateManyMutationInput;
    where?: PlaylistItemWhereInput;
  }) => BatchPayloadPromise;
  upsertPlaylistItem: (args: {
    where: PlaylistItemWhereUniqueInput;
    create: PlaylistItemCreateInput;
    update: PlaylistItemUpdateInput;
  }) => PlaylistItemPromise;
  deletePlaylistItem: (
    where: PlaylistItemWhereUniqueInput
  ) => PlaylistItemPromise;
  deleteManyPlaylistItems: (
    where?: PlaylistItemWhereInput
  ) => BatchPayloadPromise;
  createService: (data: ServiceCreateInput) => ServicePromise;
  updateService: (args: {
    data: ServiceUpdateInput;
    where: ServiceWhereUniqueInput;
  }) => ServicePromise;
  updateManyServices: (args: {
    data: ServiceUpdateManyMutationInput;
    where?: ServiceWhereInput;
  }) => BatchPayloadPromise;
  upsertService: (args: {
    where: ServiceWhereUniqueInput;
    create: ServiceCreateInput;
    update: ServiceUpdateInput;
  }) => ServicePromise;
  deleteService: (where: ServiceWhereUniqueInput) => ServicePromise;
  deleteManyServices: (where?: ServiceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVideo: (data: VideoCreateInput) => VideoPromise;
  updateVideo: (args: {
    data: VideoUpdateInput;
    where: VideoWhereUniqueInput;
  }) => VideoPromise;
  updateManyVideos: (args: {
    data: VideoUpdateManyMutationInput;
    where?: VideoWhereInput;
  }) => BatchPayloadPromise;
  upsertVideo: (args: {
    where: VideoWhereUniqueInput;
    create: VideoCreateInput;
    update: VideoUpdateInput;
  }) => VideoPromise;
  deleteVideo: (where: VideoWhereUniqueInput) => VideoPromise;
  deleteManyVideos: (where?: VideoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  article: (
    where?: ArticleSubscriptionWhereInput
  ) => ArticleSubscriptionPayloadSubscription;
  articleSection: (
    where?: ArticleSectionSubscriptionWhereInput
  ) => ArticleSectionSubscriptionPayloadSubscription;
  playlist: (
    where?: PlaylistSubscriptionWhereInput
  ) => PlaylistSubscriptionPayloadSubscription;
  playlistItem: (
    where?: PlaylistItemSubscriptionWhereInput
  ) => PlaylistItemSubscriptionPayloadSubscription;
  service: (
    where?: ServiceSubscriptionWhereInput
  ) => ServiceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  video: (
    where?: VideoSubscriptionWhereInput
  ) => VideoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "language_ASC"
  | "language_DESC"
  | "url_ASC"
  | "url_DESC"
  | "liveUrl_ASC"
  | "liveUrl_DESC"
  | "videoUrl_ASC"
  | "videoUrl_DESC"
  | "videoRestUrl_ASC"
  | "videoRestUrl_DESC";

export type SOURCE_TYPE = "CLIPS" | "MEDIAFNS" | "YOUTUBE";

export type ArticleSectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type ArticleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "headline_ASC"
  | "headline_DESC"
  | "description_ASC"
  | "description_DESC"
  | "datePublished_ASC"
  | "datePublished_DESC"
  | "dateModified_ASC"
  | "dateModified_DESC"
  | "body_ASC"
  | "body_DESC"
  | "author_ASC"
  | "author_DESC";

export type LANGUAGE = "ES" | "EN";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type PlaylistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "childrenName_ASC"
  | "childrenName_DESC"
  | "description_ASC"
  | "description_DESC"
  | "metadata_ASC"
  | "metadata_DESC";

export type PlaylistItemOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "metadata_ASC"
  | "metadata_DESC";

export type VideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "datePublished_ASC"
  | "datePublished_DESC"
  | "dateFirstPublished_ASC"
  | "dateFirstPublished_DESC"
  | "paid_ASC"
  | "paid_DESC"
  | "sourceId_ASC"
  | "sourceId_DESC"
  | "sourceType_ASC"
  | "sourceType_DESC"
  | "metadata_ASC"
  | "metadata_DESC";

export interface PlaylistUpdateWithoutUserDataInput {
  name?: Maybe<String>;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
  parent?: Maybe<PlaylistUpdateOneWithoutChildrenInput>;
  children?: Maybe<PlaylistUpdateManyWithoutParentInput>;
  items?: Maybe<PlaylistItemUpdateManyWithoutPlayListInput>;
  service?: Maybe<ServiceUpdateOneRequiredInput>;
}

export type ArticleWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  url?: Maybe<String>;
}>;

export interface VideoUpdateOneRequiredWithoutPlayListItemsInput {
  create?: Maybe<VideoCreateWithoutPlayListItemsInput>;
  update?: Maybe<VideoUpdateWithoutPlayListItemsDataInput>;
  upsert?: Maybe<VideoUpsertWithoutPlayListItemsInput>;
  connect?: Maybe<VideoWhereUniqueInput>;
}

export interface VideoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  datePublished_not?: Maybe<DateTimeInput>;
  datePublished_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  datePublished_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  datePublished_lt?: Maybe<DateTimeInput>;
  datePublished_lte?: Maybe<DateTimeInput>;
  datePublished_gt?: Maybe<DateTimeInput>;
  datePublished_gte?: Maybe<DateTimeInput>;
  dateFirstPublished?: Maybe<DateTimeInput>;
  dateFirstPublished_not?: Maybe<DateTimeInput>;
  dateFirstPublished_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateFirstPublished_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateFirstPublished_lt?: Maybe<DateTimeInput>;
  dateFirstPublished_lte?: Maybe<DateTimeInput>;
  dateFirstPublished_gt?: Maybe<DateTimeInput>;
  dateFirstPublished_gte?: Maybe<DateTimeInput>;
  paid?: Maybe<Boolean>;
  paid_not?: Maybe<Boolean>;
  sourceId?: Maybe<String>;
  sourceId_not?: Maybe<String>;
  sourceId_in?: Maybe<String[] | String>;
  sourceId_not_in?: Maybe<String[] | String>;
  sourceId_lt?: Maybe<String>;
  sourceId_lte?: Maybe<String>;
  sourceId_gt?: Maybe<String>;
  sourceId_gte?: Maybe<String>;
  sourceId_contains?: Maybe<String>;
  sourceId_not_contains?: Maybe<String>;
  sourceId_starts_with?: Maybe<String>;
  sourceId_not_starts_with?: Maybe<String>;
  sourceId_ends_with?: Maybe<String>;
  sourceId_not_ends_with?: Maybe<String>;
  sourceType?: Maybe<SOURCE_TYPE>;
  sourceType_not?: Maybe<SOURCE_TYPE>;
  sourceType_in?: Maybe<SOURCE_TYPE[] | SOURCE_TYPE>;
  sourceType_not_in?: Maybe<SOURCE_TYPE[] | SOURCE_TYPE>;
  playListItems_every?: Maybe<PlaylistItemWhereInput>;
  playListItems_some?: Maybe<PlaylistItemWhereInput>;
  playListItems_none?: Maybe<PlaylistItemWhereInput>;
  service?: Maybe<ServiceWhereInput>;
  AND?: Maybe<VideoWhereInput[] | VideoWhereInput>;
  OR?: Maybe<VideoWhereInput[] | VideoWhereInput>;
  NOT?: Maybe<VideoWhereInput[] | VideoWhereInput>;
}

export interface VideoUpdateWithoutPlayListItemsDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateFirstPublished?: Maybe<DateTimeInput>;
  paid?: Maybe<Boolean>;
  sourceId?: Maybe<String>;
  sourceType?: Maybe<SOURCE_TYPE>;
  tags?: Maybe<VideoUpdatetagsInput>;
  metadata?: Maybe<Json>;
  service?: Maybe<ServiceUpdateOneRequiredWithoutVideosInput>;
}

export interface PlaylistItemWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  playList?: Maybe<PlaylistWhereInput>;
  video?: Maybe<VideoWhereInput>;
  AND?: Maybe<PlaylistItemWhereInput[] | PlaylistItemWhereInput>;
  OR?: Maybe<PlaylistItemWhereInput[] | PlaylistItemWhereInput>;
  NOT?: Maybe<PlaylistItemWhereInput[] | PlaylistItemWhereInput>;
}

export interface ArticleUpdatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface ArticleUpdateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface VideoUpdatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface ArticleSectionUpdateManyWithoutArticlesInput {
  create?: Maybe<
    | ArticleSectionCreateWithoutArticlesInput[]
    | ArticleSectionCreateWithoutArticlesInput
  >;
  delete?: Maybe<
    ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput
  >;
  connect?: Maybe<
    ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput
  >;
  set?: Maybe<
    ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput
  >;
  disconnect?: Maybe<
    ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput
  >;
  update?: Maybe<
    | ArticleSectionUpdateWithWhereUniqueWithoutArticlesInput[]
    | ArticleSectionUpdateWithWhereUniqueWithoutArticlesInput
  >;
  upsert?: Maybe<
    | ArticleSectionUpsertWithWhereUniqueWithoutArticlesInput[]
    | ArticleSectionUpsertWithWhereUniqueWithoutArticlesInput
  >;
  deleteMany?: Maybe<
    ArticleSectionScalarWhereInput[] | ArticleSectionScalarWhereInput
  >;
  updateMany?: Maybe<
    | ArticleSectionUpdateManyWithWhereNestedInput[]
    | ArticleSectionUpdateManyWithWhereNestedInput
  >;
}

export interface VideoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VideoWhereInput>;
  AND?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
  OR?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
  NOT?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
}

export interface ArticleSectionUpdateWithWhereUniqueWithoutArticlesInput {
  where: ArticleSectionWhereUniqueInput;
  data: ArticleSectionUpdateWithoutArticlesDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ArticleSectionUpdateWithoutArticlesDataInput {
  name?: Maybe<String>;
}

export interface ArticleSectionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  articles_every?: Maybe<ArticleWhereInput>;
  articles_some?: Maybe<ArticleWhereInput>;
  articles_none?: Maybe<ArticleWhereInput>;
  AND?: Maybe<ArticleSectionWhereInput[] | ArticleSectionWhereInput>;
  OR?: Maybe<ArticleSectionWhereInput[] | ArticleSectionWhereInput>;
  NOT?: Maybe<ArticleSectionWhereInput[] | ArticleSectionWhereInput>;
}

export interface ArticleSectionUpsertWithWhereUniqueWithoutArticlesInput {
  where: ArticleSectionWhereUniqueInput;
  update: ArticleSectionUpdateWithoutArticlesDataInput;
  create: ArticleSectionCreateWithoutArticlesInput;
}

export interface PlaylistItemSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlaylistItemWhereInput>;
  AND?: Maybe<
    PlaylistItemSubscriptionWhereInput[] | PlaylistItemSubscriptionWhereInput
  >;
  OR?: Maybe<
    PlaylistItemSubscriptionWhereInput[] | PlaylistItemSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PlaylistItemSubscriptionWhereInput[] | PlaylistItemSubscriptionWhereInput
  >;
}

export interface ArticleSectionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<
    ArticleSectionScalarWhereInput[] | ArticleSectionScalarWhereInput
  >;
  OR?: Maybe<ArticleSectionScalarWhereInput[] | ArticleSectionScalarWhereInput>;
  NOT?: Maybe<
    ArticleSectionScalarWhereInput[] | ArticleSectionScalarWhereInput
  >;
}

export interface ArticleSectionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArticleSectionWhereInput>;
  AND?: Maybe<
    | ArticleSectionSubscriptionWhereInput[]
    | ArticleSectionSubscriptionWhereInput
  >;
  OR?: Maybe<
    | ArticleSectionSubscriptionWhereInput[]
    | ArticleSectionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | ArticleSectionSubscriptionWhereInput[]
    | ArticleSectionSubscriptionWhereInput
  >;
}

export interface ArticleSectionUpdateManyWithWhereNestedInput {
  where: ArticleSectionScalarWhereInput;
  data: ArticleSectionUpdateManyDataInput;
}

export interface VideoUpdateManyMutationInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateFirstPublished?: Maybe<DateTimeInput>;
  paid?: Maybe<Boolean>;
  sourceId?: Maybe<String>;
  sourceType?: Maybe<SOURCE_TYPE>;
  tags?: Maybe<VideoUpdatetagsInput>;
  metadata?: Maybe<Json>;
}

export interface ArticleSectionUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface VideoCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateFirstPublished?: Maybe<DateTimeInput>;
  paid?: Maybe<Boolean>;
  sourceId: String;
  sourceType: SOURCE_TYPE;
  tags?: Maybe<VideoCreatetagsInput>;
  metadata?: Maybe<Json>;
  playListItems?: Maybe<PlaylistItemCreateManyWithoutVideoInput>;
  service: ServiceCreateOneWithoutVideosInput;
}

export interface ServiceUpdateOneRequiredWithoutArticlesInput {
  create?: Maybe<ServiceCreateWithoutArticlesInput>;
  update?: Maybe<ServiceUpdateWithoutArticlesDataInput>;
  upsert?: Maybe<ServiceUpsertWithoutArticlesInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  services?: Maybe<ServiceUpdateManyWithoutUsersInput>;
  playlists?: Maybe<PlaylistUpdateManyWithoutUserInput>;
}

export interface ServiceUpdateWithoutArticlesDataInput {
  name?: Maybe<ID_Input>;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutServicesInput>;
  videos?: Maybe<VideoUpdateManyWithoutServiceInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name?: Maybe<String>;
  services?: Maybe<ServiceCreateManyWithoutUsersInput>;
  playlists?: Maybe<PlaylistCreateManyWithoutUserInput>;
}

export interface UserUpdateManyWithoutServicesInput {
  create?: Maybe<
    UserCreateWithoutServicesInput[] | UserCreateWithoutServicesInput
  >;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutServicesInput[]
    | UserUpdateWithWhereUniqueWithoutServicesInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutServicesInput[]
    | UserUpsertWithWhereUniqueWithoutServicesInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceUpdateInput {
  name?: Maybe<ID_Input>;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  articles?: Maybe<ArticleUpdateManyWithoutServiceInput>;
  users?: Maybe<UserUpdateManyWithoutServicesInput>;
  videos?: Maybe<VideoUpdateManyWithoutServiceInput>;
}

export interface UserUpdateWithWhereUniqueWithoutServicesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutServicesDataInput;
}

export interface PlaylistItemUpdateManyMutationInput {
  metadata?: Maybe<Json>;
}

export interface UserUpdateWithoutServicesDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  playlists?: Maybe<PlaylistUpdateManyWithoutUserInput>;
}

export interface PlaylistItemCreateInput {
  id?: Maybe<ID_Input>;
  metadata?: Maybe<Json>;
  playList: PlaylistCreateOneWithoutItemsInput;
  video: VideoCreateOneWithoutPlayListItemsInput;
}

export interface PlaylistUpdateManyWithoutUserInput {
  create?: Maybe<
    PlaylistCreateWithoutUserInput[] | PlaylistCreateWithoutUserInput
  >;
  delete?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  connect?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  set?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  disconnect?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  update?: Maybe<
    | PlaylistUpdateWithWhereUniqueWithoutUserInput[]
    | PlaylistUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PlaylistUpsertWithWhereUniqueWithoutUserInput[]
    | PlaylistUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PlaylistScalarWhereInput[] | PlaylistScalarWhereInput>;
  updateMany?: Maybe<
    | PlaylistUpdateManyWithWhereNestedInput[]
    | PlaylistUpdateManyWithWhereNestedInput
  >;
}

export interface PlaylistUpdateManyMutationInput {
  name?: Maybe<String>;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
}

export interface PlaylistUpdateWithWhereUniqueWithoutUserInput {
  where: PlaylistWhereUniqueInput;
  data: PlaylistUpdateWithoutUserDataInput;
}

export interface PlaylistCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
  parent?: Maybe<PlaylistCreateOneWithoutChildrenInput>;
  children?: Maybe<PlaylistCreateManyWithoutParentInput>;
  items?: Maybe<PlaylistItemCreateManyWithoutPlayListInput>;
  user?: Maybe<UserCreateOneWithoutPlaylistsInput>;
  service: ServiceCreateOneInput;
}

export interface ArticleUpdateManyMutationInput {
  url?: Maybe<String>;
  headline?: Maybe<String>;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateModified?: Maybe<DateTimeInput>;
  body?: Maybe<String>;
  author?: Maybe<String>;
  tags?: Maybe<ArticleUpdatetagsInput>;
  images?: Maybe<ArticleUpdateimagesInput>;
}

export interface ArticleSectionUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface PlaylistUpdateOneWithoutChildrenInput {
  create?: Maybe<PlaylistCreateWithoutChildrenInput>;
  update?: Maybe<PlaylistUpdateWithoutChildrenDataInput>;
  upsert?: Maybe<PlaylistUpsertWithoutChildrenInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PlaylistWhereUniqueInput>;
}

export interface ArticleUpdateWithoutSectionsDataInput {
  url?: Maybe<String>;
  headline?: Maybe<String>;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateModified?: Maybe<DateTimeInput>;
  body?: Maybe<String>;
  author?: Maybe<String>;
  tags?: Maybe<ArticleUpdatetagsInput>;
  images?: Maybe<ArticleUpdateimagesInput>;
  service?: Maybe<ServiceUpdateOneRequiredWithoutArticlesInput>;
}

export interface PlaylistUpdateWithoutChildrenDataInput {
  name?: Maybe<String>;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
  parent?: Maybe<PlaylistUpdateOneWithoutChildrenInput>;
  items?: Maybe<PlaylistItemUpdateManyWithoutPlayListInput>;
  user?: Maybe<UserUpdateOneWithoutPlaylistsInput>;
  service?: Maybe<ServiceUpdateOneRequiredInput>;
}

export interface ArticleUpdateWithWhereUniqueWithoutSectionsInput {
  where: ArticleWhereUniqueInput;
  data: ArticleUpdateWithoutSectionsDataInput;
}

export interface PlaylistItemUpdateManyWithoutPlayListInput {
  create?: Maybe<
    | PlaylistItemCreateWithoutPlayListInput[]
    | PlaylistItemCreateWithoutPlayListInput
  >;
  delete?: Maybe<PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput>;
  connect?: Maybe<
    PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput
  >;
  set?: Maybe<PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput>;
  disconnect?: Maybe<
    PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput
  >;
  update?: Maybe<
    | PlaylistItemUpdateWithWhereUniqueWithoutPlayListInput[]
    | PlaylistItemUpdateWithWhereUniqueWithoutPlayListInput
  >;
  upsert?: Maybe<
    | PlaylistItemUpsertWithWhereUniqueWithoutPlayListInput[]
    | PlaylistItemUpsertWithWhereUniqueWithoutPlayListInput
  >;
  deleteMany?: Maybe<
    PlaylistItemScalarWhereInput[] | PlaylistItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | PlaylistItemUpdateManyWithWhereNestedInput[]
    | PlaylistItemUpdateManyWithWhereNestedInput
  >;
}

export interface ArticleSectionUpdateInput {
  name?: Maybe<String>;
  articles?: Maybe<ArticleUpdateManyWithoutSectionsInput>;
}

export interface PlaylistItemUpdateWithWhereUniqueWithoutPlayListInput {
  where: PlaylistItemWhereUniqueInput;
  data: PlaylistItemUpdateWithoutPlayListDataInput;
}

export interface ArticleCreateWithoutSectionsInput {
  id?: Maybe<ID_Input>;
  url: String;
  headline: String;
  description?: Maybe<String>;
  datePublished: DateTimeInput;
  dateModified?: Maybe<DateTimeInput>;
  body?: Maybe<String>;
  author?: Maybe<String>;
  tags?: Maybe<ArticleCreatetagsInput>;
  images?: Maybe<ArticleCreateimagesInput>;
  service: ServiceCreateOneWithoutArticlesInput;
}

export interface PlaylistItemUpdateWithoutPlayListDataInput {
  metadata?: Maybe<Json>;
  video?: Maybe<VideoUpdateOneRequiredWithoutPlayListItemsInput>;
}

export interface ArticleSectionCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  articles?: Maybe<ArticleCreateManyWithoutSectionsInput>;
}

export interface ServiceUpsertWithoutArticlesInput {
  update: ServiceUpdateWithoutArticlesDataInput;
  create: ServiceCreateWithoutArticlesInput;
}

export interface ArticleCreateInput {
  id?: Maybe<ID_Input>;
  url: String;
  headline: String;
  description?: Maybe<String>;
  datePublished: DateTimeInput;
  dateModified?: Maybe<DateTimeInput>;
  body?: Maybe<String>;
  author?: Maybe<String>;
  tags?: Maybe<ArticleCreatetagsInput>;
  images?: Maybe<ArticleCreateimagesInput>;
  sections?: Maybe<ArticleSectionCreateManyWithoutArticlesInput>;
  service: ServiceCreateOneWithoutArticlesInput;
}

export interface PlaylistWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  childrenName?: Maybe<String>;
  childrenName_not?: Maybe<String>;
  childrenName_in?: Maybe<String[] | String>;
  childrenName_not_in?: Maybe<String[] | String>;
  childrenName_lt?: Maybe<String>;
  childrenName_lte?: Maybe<String>;
  childrenName_gt?: Maybe<String>;
  childrenName_gte?: Maybe<String>;
  childrenName_contains?: Maybe<String>;
  childrenName_not_contains?: Maybe<String>;
  childrenName_starts_with?: Maybe<String>;
  childrenName_not_starts_with?: Maybe<String>;
  childrenName_ends_with?: Maybe<String>;
  childrenName_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  parent?: Maybe<PlaylistWhereInput>;
  children_every?: Maybe<PlaylistWhereInput>;
  children_some?: Maybe<PlaylistWhereInput>;
  children_none?: Maybe<PlaylistWhereInput>;
  items_every?: Maybe<PlaylistItemWhereInput>;
  items_some?: Maybe<PlaylistItemWhereInput>;
  items_none?: Maybe<PlaylistItemWhereInput>;
  user?: Maybe<UserWhereInput>;
  service?: Maybe<ServiceWhereInput>;
  AND?: Maybe<PlaylistWhereInput[] | PlaylistWhereInput>;
  OR?: Maybe<PlaylistWhereInput[] | PlaylistWhereInput>;
  NOT?: Maybe<PlaylistWhereInput[] | PlaylistWhereInput>;
}

export interface ArticleCreateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface UserUpdateManyDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface ArticleSectionCreateWithoutArticlesInput {
  id?: Maybe<ID_Input>;
  name: String;
}

export interface ServiceUpdateOneRequiredWithoutVideosInput {
  create?: Maybe<ServiceCreateWithoutVideosInput>;
  update?: Maybe<ServiceUpdateWithoutVideosDataInput>;
  upsert?: Maybe<ServiceUpsertWithoutVideosInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ServiceCreateWithoutArticlesInput {
  id?: Maybe<ID_Input>;
  name: ID_Input;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  users?: Maybe<UserCreateManyWithoutServicesInput>;
  videos?: Maybe<VideoCreateManyWithoutServiceInput>;
}

export interface ServiceUpdateWithoutVideosDataInput {
  name?: Maybe<ID_Input>;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  articles?: Maybe<ArticleUpdateManyWithoutServiceInput>;
  users?: Maybe<UserUpdateManyWithoutServicesInput>;
}

export interface UserCreateWithoutServicesInput {
  id?: Maybe<ID_Input>;
  email: String;
  name?: Maybe<String>;
  playlists?: Maybe<PlaylistCreateManyWithoutUserInput>;
}

export interface ArticleUpdateManyWithoutServiceInput {
  create?: Maybe<
    ArticleCreateWithoutServiceInput[] | ArticleCreateWithoutServiceInput
  >;
  delete?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  connect?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  set?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  disconnect?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  update?: Maybe<
    | ArticleUpdateWithWhereUniqueWithoutServiceInput[]
    | ArticleUpdateWithWhereUniqueWithoutServiceInput
  >;
  upsert?: Maybe<
    | ArticleUpsertWithWhereUniqueWithoutServiceInput[]
    | ArticleUpsertWithWhereUniqueWithoutServiceInput
  >;
  deleteMany?: Maybe<ArticleScalarWhereInput[] | ArticleScalarWhereInput>;
  updateMany?: Maybe<
    | ArticleUpdateManyWithWhereNestedInput[]
    | ArticleUpdateManyWithWhereNestedInput
  >;
}

export interface PlaylistCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  name: String;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
  parent?: Maybe<PlaylistCreateOneWithoutChildrenInput>;
  children?: Maybe<PlaylistCreateManyWithoutParentInput>;
  items?: Maybe<PlaylistItemCreateManyWithoutPlayListInput>;
  service: ServiceCreateOneInput;
}

export interface ArticleUpdateWithWhereUniqueWithoutServiceInput {
  where: ArticleWhereUniqueInput;
  data: ArticleUpdateWithoutServiceDataInput;
}

export interface PlaylistCreateWithoutChildrenInput {
  id?: Maybe<ID_Input>;
  name: String;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
  parent?: Maybe<PlaylistCreateOneWithoutChildrenInput>;
  items?: Maybe<PlaylistItemCreateManyWithoutPlayListInput>;
  user?: Maybe<UserCreateOneWithoutPlaylistsInput>;
  service: ServiceCreateOneInput;
}

export interface ArticleUpdateWithoutServiceDataInput {
  url?: Maybe<String>;
  headline?: Maybe<String>;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateModified?: Maybe<DateTimeInput>;
  body?: Maybe<String>;
  author?: Maybe<String>;
  tags?: Maybe<ArticleUpdatetagsInput>;
  images?: Maybe<ArticleUpdateimagesInput>;
  sections?: Maybe<ArticleSectionUpdateManyWithoutArticlesInput>;
}

export interface PlaylistItemCreateWithoutPlayListInput {
  id?: Maybe<ID_Input>;
  metadata?: Maybe<Json>;
  video: VideoCreateOneWithoutPlayListItemsInput;
}

export interface ArticleUpsertWithWhereUniqueWithoutServiceInput {
  where: ArticleWhereUniqueInput;
  update: ArticleUpdateWithoutServiceDataInput;
  create: ArticleCreateWithoutServiceInput;
}

export interface VideoCreateWithoutPlayListItemsInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateFirstPublished?: Maybe<DateTimeInput>;
  paid?: Maybe<Boolean>;
  sourceId: String;
  sourceType: SOURCE_TYPE;
  tags?: Maybe<VideoCreatetagsInput>;
  metadata?: Maybe<Json>;
  service: ServiceCreateOneWithoutVideosInput;
}

export interface ArticleScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  headline?: Maybe<String>;
  headline_not?: Maybe<String>;
  headline_in?: Maybe<String[] | String>;
  headline_not_in?: Maybe<String[] | String>;
  headline_lt?: Maybe<String>;
  headline_lte?: Maybe<String>;
  headline_gt?: Maybe<String>;
  headline_gte?: Maybe<String>;
  headline_contains?: Maybe<String>;
  headline_not_contains?: Maybe<String>;
  headline_starts_with?: Maybe<String>;
  headline_not_starts_with?: Maybe<String>;
  headline_ends_with?: Maybe<String>;
  headline_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  datePublished_not?: Maybe<DateTimeInput>;
  datePublished_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  datePublished_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  datePublished_lt?: Maybe<DateTimeInput>;
  datePublished_lte?: Maybe<DateTimeInput>;
  datePublished_gt?: Maybe<DateTimeInput>;
  datePublished_gte?: Maybe<DateTimeInput>;
  dateModified?: Maybe<DateTimeInput>;
  dateModified_not?: Maybe<DateTimeInput>;
  dateModified_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateModified_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateModified_lt?: Maybe<DateTimeInput>;
  dateModified_lte?: Maybe<DateTimeInput>;
  dateModified_gt?: Maybe<DateTimeInput>;
  dateModified_gte?: Maybe<DateTimeInput>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  AND?: Maybe<ArticleScalarWhereInput[] | ArticleScalarWhereInput>;
  OR?: Maybe<ArticleScalarWhereInput[] | ArticleScalarWhereInput>;
  NOT?: Maybe<ArticleScalarWhereInput[] | ArticleScalarWhereInput>;
}

export interface ServiceCreateOneWithoutVideosInput {
  create?: Maybe<ServiceCreateWithoutVideosInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ArticleUpdateManyWithWhereNestedInput {
  where: ArticleScalarWhereInput;
  data: ArticleUpdateManyDataInput;
}

export interface ArticleCreateManyWithoutServiceInput {
  create?: Maybe<
    ArticleCreateWithoutServiceInput[] | ArticleCreateWithoutServiceInput
  >;
  connect?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
}

export interface ArticleUpdateManyDataInput {
  url?: Maybe<String>;
  headline?: Maybe<String>;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateModified?: Maybe<DateTimeInput>;
  body?: Maybe<String>;
  author?: Maybe<String>;
  tags?: Maybe<ArticleUpdatetagsInput>;
  images?: Maybe<ArticleUpdateimagesInput>;
}

export interface UserCreateOneWithoutPlaylistsInput {
  create?: Maybe<UserCreateWithoutPlaylistsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ServiceUpsertWithoutVideosInput {
  update: ServiceUpdateWithoutVideosDataInput;
  create: ServiceCreateWithoutVideosInput;
}

export interface ServiceCreateManyWithoutUsersInput {
  create?: Maybe<
    ServiceCreateWithoutUsersInput[] | ServiceCreateWithoutUsersInput
  >;
  connect?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
}

export interface VideoUpsertWithoutPlayListItemsInput {
  update: VideoUpdateWithoutPlayListItemsDataInput;
  create: VideoCreateWithoutPlayListItemsInput;
}

export interface VideoCreateManyWithoutServiceInput {
  create?: Maybe<
    VideoCreateWithoutServiceInput[] | VideoCreateWithoutServiceInput
  >;
  connect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
}

export interface PlaylistItemUpsertWithWhereUniqueWithoutPlayListInput {
  where: PlaylistItemWhereUniqueInput;
  update: PlaylistItemUpdateWithoutPlayListDataInput;
  create: PlaylistItemCreateWithoutPlayListInput;
}

export interface PlaylistItemCreateManyWithoutVideoInput {
  create?: Maybe<
    PlaylistItemCreateWithoutVideoInput[] | PlaylistItemCreateWithoutVideoInput
  >;
  connect?: Maybe<
    PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput
  >;
}

export interface PlaylistItemScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PlaylistItemScalarWhereInput[] | PlaylistItemScalarWhereInput>;
  OR?: Maybe<PlaylistItemScalarWhereInput[] | PlaylistItemScalarWhereInput>;
  NOT?: Maybe<PlaylistItemScalarWhereInput[] | PlaylistItemScalarWhereInput>;
}

export interface PlaylistCreateOneWithoutItemsInput {
  create?: Maybe<PlaylistCreateWithoutItemsInput>;
  connect?: Maybe<PlaylistWhereUniqueInput>;
}

export interface PlaylistItemUpdateManyWithWhereNestedInput {
  where: PlaylistItemScalarWhereInput;
  data: PlaylistItemUpdateManyDataInput;
}

export interface PlaylistCreateManyWithoutParentInput {
  create?: Maybe<
    PlaylistCreateWithoutParentInput[] | PlaylistCreateWithoutParentInput
  >;
  connect?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
}

export interface PlaylistItemUpdateManyDataInput {
  metadata?: Maybe<Json>;
}

export interface ServiceCreateOneInput {
  create?: Maybe<ServiceCreateInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface UserUpdateOneWithoutPlaylistsInput {
  create?: Maybe<UserCreateWithoutPlaylistsInput>;
  update?: Maybe<UserUpdateWithoutPlaylistsDataInput>;
  upsert?: Maybe<UserUpsertWithoutPlaylistsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ArticleUpdateInput {
  url?: Maybe<String>;
  headline?: Maybe<String>;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateModified?: Maybe<DateTimeInput>;
  body?: Maybe<String>;
  author?: Maybe<String>;
  tags?: Maybe<ArticleUpdatetagsInput>;
  images?: Maybe<ArticleUpdateimagesInput>;
  sections?: Maybe<ArticleSectionUpdateManyWithoutArticlesInput>;
  service?: Maybe<ServiceUpdateOneRequiredWithoutArticlesInput>;
}

export interface UserUpdateWithoutPlaylistsDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  services?: Maybe<ServiceUpdateManyWithoutUsersInput>;
}

export interface ServiceWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<ID_Input>;
  name_not?: Maybe<ID_Input>;
  name_in?: Maybe<ID_Input[] | ID_Input>;
  name_not_in?: Maybe<ID_Input[] | ID_Input>;
  name_lt?: Maybe<ID_Input>;
  name_lte?: Maybe<ID_Input>;
  name_gt?: Maybe<ID_Input>;
  name_gte?: Maybe<ID_Input>;
  name_contains?: Maybe<ID_Input>;
  name_not_contains?: Maybe<ID_Input>;
  name_starts_with?: Maybe<ID_Input>;
  name_not_starts_with?: Maybe<ID_Input>;
  name_ends_with?: Maybe<ID_Input>;
  name_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  language?: Maybe<LANGUAGE>;
  language_not?: Maybe<LANGUAGE>;
  language_in?: Maybe<LANGUAGE[] | LANGUAGE>;
  language_not_in?: Maybe<LANGUAGE[] | LANGUAGE>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  liveUrl?: Maybe<String>;
  liveUrl_not?: Maybe<String>;
  liveUrl_in?: Maybe<String[] | String>;
  liveUrl_not_in?: Maybe<String[] | String>;
  liveUrl_lt?: Maybe<String>;
  liveUrl_lte?: Maybe<String>;
  liveUrl_gt?: Maybe<String>;
  liveUrl_gte?: Maybe<String>;
  liveUrl_contains?: Maybe<String>;
  liveUrl_not_contains?: Maybe<String>;
  liveUrl_starts_with?: Maybe<String>;
  liveUrl_not_starts_with?: Maybe<String>;
  liveUrl_ends_with?: Maybe<String>;
  liveUrl_not_ends_with?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoUrl_not?: Maybe<String>;
  videoUrl_in?: Maybe<String[] | String>;
  videoUrl_not_in?: Maybe<String[] | String>;
  videoUrl_lt?: Maybe<String>;
  videoUrl_lte?: Maybe<String>;
  videoUrl_gt?: Maybe<String>;
  videoUrl_gte?: Maybe<String>;
  videoUrl_contains?: Maybe<String>;
  videoUrl_not_contains?: Maybe<String>;
  videoUrl_starts_with?: Maybe<String>;
  videoUrl_not_starts_with?: Maybe<String>;
  videoUrl_ends_with?: Maybe<String>;
  videoUrl_not_ends_with?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  videoRestUrl_not?: Maybe<String>;
  videoRestUrl_in?: Maybe<String[] | String>;
  videoRestUrl_not_in?: Maybe<String[] | String>;
  videoRestUrl_lt?: Maybe<String>;
  videoRestUrl_lte?: Maybe<String>;
  videoRestUrl_gt?: Maybe<String>;
  videoRestUrl_gte?: Maybe<String>;
  videoRestUrl_contains?: Maybe<String>;
  videoRestUrl_not_contains?: Maybe<String>;
  videoRestUrl_starts_with?: Maybe<String>;
  videoRestUrl_not_starts_with?: Maybe<String>;
  videoRestUrl_ends_with?: Maybe<String>;
  videoRestUrl_not_ends_with?: Maybe<String>;
  articles_every?: Maybe<ArticleWhereInput>;
  articles_some?: Maybe<ArticleWhereInput>;
  articles_none?: Maybe<ArticleWhereInput>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  videos_every?: Maybe<VideoWhereInput>;
  videos_some?: Maybe<VideoWhereInput>;
  videos_none?: Maybe<VideoWhereInput>;
  AND?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
  OR?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
  NOT?: Maybe<ServiceWhereInput[] | ServiceWhereInput>;
}

export interface ServiceUpdateManyWithoutUsersInput {
  create?: Maybe<
    ServiceCreateWithoutUsersInput[] | ServiceCreateWithoutUsersInput
  >;
  delete?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  connect?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  set?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  disconnect?: Maybe<ServiceWhereUniqueInput[] | ServiceWhereUniqueInput>;
  update?: Maybe<
    | ServiceUpdateWithWhereUniqueWithoutUsersInput[]
    | ServiceUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | ServiceUpsertWithWhereUniqueWithoutUsersInput[]
    | ServiceUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
  updateMany?: Maybe<
    | ServiceUpdateManyWithWhereNestedInput[]
    | ServiceUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ServiceWhereInput>;
  AND?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
  OR?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
  NOT?: Maybe<ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput>;
}

export interface ServiceUpdateWithWhereUniqueWithoutUsersInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateWithoutUsersDataInput;
}

export interface ArticleSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ArticleWhereInput>;
  AND?: Maybe<ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput>;
  OR?: Maybe<ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput>;
  NOT?: Maybe<ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput>;
}

export interface ServiceUpdateWithoutUsersDataInput {
  name?: Maybe<ID_Input>;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  articles?: Maybe<ArticleUpdateManyWithoutServiceInput>;
  videos?: Maybe<VideoUpdateManyWithoutServiceInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
}

export interface VideoUpdateManyWithoutServiceInput {
  create?: Maybe<
    VideoCreateWithoutServiceInput[] | VideoCreateWithoutServiceInput
  >;
  delete?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  connect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  set?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  disconnect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  update?: Maybe<
    | VideoUpdateWithWhereUniqueWithoutServiceInput[]
    | VideoUpdateWithWhereUniqueWithoutServiceInput
  >;
  upsert?: Maybe<
    | VideoUpsertWithWhereUniqueWithoutServiceInput[]
    | VideoUpsertWithWhereUniqueWithoutServiceInput
  >;
  deleteMany?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  updateMany?: Maybe<
    VideoUpdateManyWithWhereNestedInput[] | VideoUpdateManyWithWhereNestedInput
  >;
}

export interface ServiceUpdateManyMutationInput {
  name?: Maybe<ID_Input>;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
}

export interface VideoUpdateWithWhereUniqueWithoutServiceInput {
  where: VideoWhereUniqueInput;
  data: VideoUpdateWithoutServiceDataInput;
}

export interface PlaylistItemUpdateInput {
  metadata?: Maybe<Json>;
  playList?: Maybe<PlaylistUpdateOneRequiredWithoutItemsInput>;
  video?: Maybe<VideoUpdateOneRequiredWithoutPlayListItemsInput>;
}

export interface VideoUpdateWithoutServiceDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateFirstPublished?: Maybe<DateTimeInput>;
  paid?: Maybe<Boolean>;
  sourceId?: Maybe<String>;
  sourceType?: Maybe<SOURCE_TYPE>;
  tags?: Maybe<VideoUpdatetagsInput>;
  metadata?: Maybe<Json>;
  playListItems?: Maybe<PlaylistItemUpdateManyWithoutVideoInput>;
}

export interface PlaylistUpdateInput {
  name?: Maybe<String>;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
  parent?: Maybe<PlaylistUpdateOneWithoutChildrenInput>;
  children?: Maybe<PlaylistUpdateManyWithoutParentInput>;
  items?: Maybe<PlaylistItemUpdateManyWithoutPlayListInput>;
  user?: Maybe<UserUpdateOneWithoutPlaylistsInput>;
  service?: Maybe<ServiceUpdateOneRequiredInput>;
}

export interface PlaylistItemUpdateManyWithoutVideoInput {
  create?: Maybe<
    PlaylistItemCreateWithoutVideoInput[] | PlaylistItemCreateWithoutVideoInput
  >;
  delete?: Maybe<PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput>;
  connect?: Maybe<
    PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput
  >;
  set?: Maybe<PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput>;
  disconnect?: Maybe<
    PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput
  >;
  update?: Maybe<
    | PlaylistItemUpdateWithWhereUniqueWithoutVideoInput[]
    | PlaylistItemUpdateWithWhereUniqueWithoutVideoInput
  >;
  upsert?: Maybe<
    | PlaylistItemUpsertWithWhereUniqueWithoutVideoInput[]
    | PlaylistItemUpsertWithWhereUniqueWithoutVideoInput
  >;
  deleteMany?: Maybe<
    PlaylistItemScalarWhereInput[] | PlaylistItemScalarWhereInput
  >;
  updateMany?: Maybe<
    | PlaylistItemUpdateManyWithWhereNestedInput[]
    | PlaylistItemUpdateManyWithWhereNestedInput
  >;
}

export interface ArticleUpsertWithWhereUniqueWithoutSectionsInput {
  where: ArticleWhereUniqueInput;
  update: ArticleUpdateWithoutSectionsDataInput;
  create: ArticleCreateWithoutSectionsInput;
}

export interface PlaylistItemUpdateWithWhereUniqueWithoutVideoInput {
  where: PlaylistItemWhereUniqueInput;
  data: PlaylistItemUpdateWithoutVideoDataInput;
}

export interface ArticleUpdateManyWithoutSectionsInput {
  create?: Maybe<
    ArticleCreateWithoutSectionsInput[] | ArticleCreateWithoutSectionsInput
  >;
  delete?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  connect?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  set?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  disconnect?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
  update?: Maybe<
    | ArticleUpdateWithWhereUniqueWithoutSectionsInput[]
    | ArticleUpdateWithWhereUniqueWithoutSectionsInput
  >;
  upsert?: Maybe<
    | ArticleUpsertWithWhereUniqueWithoutSectionsInput[]
    | ArticleUpsertWithWhereUniqueWithoutSectionsInput
  >;
  deleteMany?: Maybe<ArticleScalarWhereInput[] | ArticleScalarWhereInput>;
  updateMany?: Maybe<
    | ArticleUpdateManyWithWhereNestedInput[]
    | ArticleUpdateManyWithWhereNestedInput
  >;
}

export interface PlaylistItemUpdateWithoutVideoDataInput {
  metadata?: Maybe<Json>;
  playList?: Maybe<PlaylistUpdateOneRequiredWithoutItemsInput>;
}

export interface ArticleCreateManyWithoutSectionsInput {
  create?: Maybe<
    ArticleCreateWithoutSectionsInput[] | ArticleCreateWithoutSectionsInput
  >;
  connect?: Maybe<ArticleWhereUniqueInput[] | ArticleWhereUniqueInput>;
}

export interface PlaylistUpdateOneRequiredWithoutItemsInput {
  create?: Maybe<PlaylistCreateWithoutItemsInput>;
  update?: Maybe<PlaylistUpdateWithoutItemsDataInput>;
  upsert?: Maybe<PlaylistUpsertWithoutItemsInput>;
  connect?: Maybe<PlaylistWhereUniqueInput>;
}

export interface ArticleCreatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface PlaylistUpdateWithoutItemsDataInput {
  name?: Maybe<String>;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
  parent?: Maybe<PlaylistUpdateOneWithoutChildrenInput>;
  children?: Maybe<PlaylistUpdateManyWithoutParentInput>;
  user?: Maybe<UserUpdateOneWithoutPlaylistsInput>;
  service?: Maybe<ServiceUpdateOneRequiredInput>;
}

export interface ServiceCreateOneWithoutArticlesInput {
  create?: Maybe<ServiceCreateWithoutArticlesInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface PlaylistUpdateManyWithoutParentInput {
  create?: Maybe<
    PlaylistCreateWithoutParentInput[] | PlaylistCreateWithoutParentInput
  >;
  delete?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  connect?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  set?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  disconnect?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
  update?: Maybe<
    | PlaylistUpdateWithWhereUniqueWithoutParentInput[]
    | PlaylistUpdateWithWhereUniqueWithoutParentInput
  >;
  upsert?: Maybe<
    | PlaylistUpsertWithWhereUniqueWithoutParentInput[]
    | PlaylistUpsertWithWhereUniqueWithoutParentInput
  >;
  deleteMany?: Maybe<PlaylistScalarWhereInput[] | PlaylistScalarWhereInput>;
  updateMany?: Maybe<
    | PlaylistUpdateManyWithWhereNestedInput[]
    | PlaylistUpdateManyWithWhereNestedInput
  >;
}

export interface PlaylistCreateManyWithoutUserInput {
  create?: Maybe<
    PlaylistCreateWithoutUserInput[] | PlaylistCreateWithoutUserInput
  >;
  connect?: Maybe<PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput>;
}

export interface PlaylistUpdateWithWhereUniqueWithoutParentInput {
  where: PlaylistWhereUniqueInput;
  data: PlaylistUpdateWithoutParentDataInput;
}

export interface PlaylistItemCreateManyWithoutPlayListInput {
  create?: Maybe<
    | PlaylistItemCreateWithoutPlayListInput[]
    | PlaylistItemCreateWithoutPlayListInput
  >;
  connect?: Maybe<
    PlaylistItemWhereUniqueInput[] | PlaylistItemWhereUniqueInput
  >;
}

export interface PlaylistUpdateWithoutParentDataInput {
  name?: Maybe<String>;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
  children?: Maybe<PlaylistUpdateManyWithoutParentInput>;
  items?: Maybe<PlaylistItemUpdateManyWithoutPlayListInput>;
  user?: Maybe<UserUpdateOneWithoutPlaylistsInput>;
  service?: Maybe<ServiceUpdateOneRequiredInput>;
}

export interface VideoCreatetagsInput {
  set?: Maybe<String[] | String>;
}

export interface ServiceUpdateOneRequiredInput {
  create?: Maybe<ServiceCreateInput>;
  update?: Maybe<ServiceUpdateDataInput>;
  upsert?: Maybe<ServiceUpsertNestedInput>;
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ArticleCreateWithoutServiceInput {
  id?: Maybe<ID_Input>;
  url: String;
  headline: String;
  description?: Maybe<String>;
  datePublished: DateTimeInput;
  dateModified?: Maybe<DateTimeInput>;
  body?: Maybe<String>;
  author?: Maybe<String>;
  tags?: Maybe<ArticleCreatetagsInput>;
  images?: Maybe<ArticleCreateimagesInput>;
  sections?: Maybe<ArticleSectionCreateManyWithoutArticlesInput>;
}

export interface ServiceUpdateDataInput {
  name?: Maybe<ID_Input>;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  articles?: Maybe<ArticleUpdateManyWithoutServiceInput>;
  users?: Maybe<UserUpdateManyWithoutServicesInput>;
  videos?: Maybe<VideoUpdateManyWithoutServiceInput>;
}

export interface ServiceCreateWithoutUsersInput {
  id?: Maybe<ID_Input>;
  name: ID_Input;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  articles?: Maybe<ArticleCreateManyWithoutServiceInput>;
  videos?: Maybe<VideoCreateManyWithoutServiceInput>;
}

export interface ServiceUpsertNestedInput {
  update: ServiceUpdateDataInput;
  create: ServiceCreateInput;
}

export interface PlaylistItemCreateWithoutVideoInput {
  id?: Maybe<ID_Input>;
  metadata?: Maybe<Json>;
  playList: PlaylistCreateOneWithoutItemsInput;
}

export interface PlaylistUpsertWithWhereUniqueWithoutParentInput {
  where: PlaylistWhereUniqueInput;
  update: PlaylistUpdateWithoutParentDataInput;
  create: PlaylistCreateWithoutParentInput;
}

export interface PlaylistCreateWithoutParentInput {
  id?: Maybe<ID_Input>;
  name: String;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
  children?: Maybe<PlaylistCreateManyWithoutParentInput>;
  items?: Maybe<PlaylistItemCreateManyWithoutPlayListInput>;
  user?: Maybe<UserCreateOneWithoutPlaylistsInput>;
  service: ServiceCreateOneInput;
}

export interface PlaylistScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  childrenName?: Maybe<String>;
  childrenName_not?: Maybe<String>;
  childrenName_in?: Maybe<String[] | String>;
  childrenName_not_in?: Maybe<String[] | String>;
  childrenName_lt?: Maybe<String>;
  childrenName_lte?: Maybe<String>;
  childrenName_gt?: Maybe<String>;
  childrenName_gte?: Maybe<String>;
  childrenName_contains?: Maybe<String>;
  childrenName_not_contains?: Maybe<String>;
  childrenName_starts_with?: Maybe<String>;
  childrenName_not_starts_with?: Maybe<String>;
  childrenName_ends_with?: Maybe<String>;
  childrenName_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  AND?: Maybe<PlaylistScalarWhereInput[] | PlaylistScalarWhereInput>;
  OR?: Maybe<PlaylistScalarWhereInput[] | PlaylistScalarWhereInput>;
  NOT?: Maybe<PlaylistScalarWhereInput[] | PlaylistScalarWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  services_every?: Maybe<ServiceWhereInput>;
  services_some?: Maybe<ServiceWhereInput>;
  services_none?: Maybe<ServiceWhereInput>;
  playlists_every?: Maybe<PlaylistWhereInput>;
  playlists_some?: Maybe<PlaylistWhereInput>;
  playlists_none?: Maybe<PlaylistWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PlaylistUpdateManyWithWhereNestedInput {
  where: PlaylistScalarWhereInput;
  data: PlaylistUpdateManyDataInput;
}

export interface PlaylistSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PlaylistWhereInput>;
  AND?: Maybe<
    PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput
  >;
  OR?: Maybe<PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput>;
  NOT?: Maybe<
    PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput
  >;
}

export interface PlaylistUpdateManyDataInput {
  name?: Maybe<String>;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
}

export type ArticleSectionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<String>;
}>;

export interface PlaylistUpsertWithoutItemsInput {
  update: PlaylistUpdateWithoutItemsDataInput;
  create: PlaylistCreateWithoutItemsInput;
}

export type PlaylistItemWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface PlaylistItemUpsertWithWhereUniqueWithoutVideoInput {
  where: PlaylistItemWhereUniqueInput;
  update: PlaylistItemUpdateWithoutVideoDataInput;
  create: PlaylistItemCreateWithoutVideoInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface VideoUpsertWithWhereUniqueWithoutServiceInput {
  where: VideoWhereUniqueInput;
  update: VideoUpdateWithoutServiceDataInput;
  create: VideoCreateWithoutServiceInput;
}

export interface UserCreateManyWithoutServicesInput {
  create?: Maybe<
    UserCreateWithoutServicesInput[] | UserCreateWithoutServicesInput
  >;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface VideoScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  datePublished_not?: Maybe<DateTimeInput>;
  datePublished_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  datePublished_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  datePublished_lt?: Maybe<DateTimeInput>;
  datePublished_lte?: Maybe<DateTimeInput>;
  datePublished_gt?: Maybe<DateTimeInput>;
  datePublished_gte?: Maybe<DateTimeInput>;
  dateFirstPublished?: Maybe<DateTimeInput>;
  dateFirstPublished_not?: Maybe<DateTimeInput>;
  dateFirstPublished_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateFirstPublished_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateFirstPublished_lt?: Maybe<DateTimeInput>;
  dateFirstPublished_lte?: Maybe<DateTimeInput>;
  dateFirstPublished_gt?: Maybe<DateTimeInput>;
  dateFirstPublished_gte?: Maybe<DateTimeInput>;
  paid?: Maybe<Boolean>;
  paid_not?: Maybe<Boolean>;
  sourceId?: Maybe<String>;
  sourceId_not?: Maybe<String>;
  sourceId_in?: Maybe<String[] | String>;
  sourceId_not_in?: Maybe<String[] | String>;
  sourceId_lt?: Maybe<String>;
  sourceId_lte?: Maybe<String>;
  sourceId_gt?: Maybe<String>;
  sourceId_gte?: Maybe<String>;
  sourceId_contains?: Maybe<String>;
  sourceId_not_contains?: Maybe<String>;
  sourceId_starts_with?: Maybe<String>;
  sourceId_not_starts_with?: Maybe<String>;
  sourceId_ends_with?: Maybe<String>;
  sourceId_not_ends_with?: Maybe<String>;
  sourceType?: Maybe<SOURCE_TYPE>;
  sourceType_not?: Maybe<SOURCE_TYPE>;
  sourceType_in?: Maybe<SOURCE_TYPE[] | SOURCE_TYPE>;
  sourceType_not_in?: Maybe<SOURCE_TYPE[] | SOURCE_TYPE>;
  AND?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  OR?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  NOT?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
}

export interface VideoCreateOneWithoutPlayListItemsInput {
  create?: Maybe<VideoCreateWithoutPlayListItemsInput>;
  connect?: Maybe<VideoWhereUniqueInput>;
}

export interface VideoUpdateManyWithWhereNestedInput {
  where: VideoScalarWhereInput;
  data: VideoUpdateManyDataInput;
}

export interface UserCreateWithoutPlaylistsInput {
  id?: Maybe<ID_Input>;
  email: String;
  name?: Maybe<String>;
  services?: Maybe<ServiceCreateManyWithoutUsersInput>;
}

export interface VideoUpdateManyDataInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateFirstPublished?: Maybe<DateTimeInput>;
  paid?: Maybe<Boolean>;
  sourceId?: Maybe<String>;
  sourceType?: Maybe<SOURCE_TYPE>;
  tags?: Maybe<VideoUpdatetagsInput>;
  metadata?: Maybe<Json>;
}

export interface PlaylistCreateWithoutItemsInput {
  id?: Maybe<ID_Input>;
  name: String;
  childrenName?: Maybe<String>;
  description?: Maybe<String>;
  metadata?: Maybe<Json>;
  parent?: Maybe<PlaylistCreateOneWithoutChildrenInput>;
  children?: Maybe<PlaylistCreateManyWithoutParentInput>;
  user?: Maybe<UserCreateOneWithoutPlaylistsInput>;
  service: ServiceCreateOneInput;
}

export interface ServiceUpsertWithWhereUniqueWithoutUsersInput {
  where: ServiceWhereUniqueInput;
  update: ServiceUpdateWithoutUsersDataInput;
  create: ServiceCreateWithoutUsersInput;
}

export interface ArticleWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  headline?: Maybe<String>;
  headline_not?: Maybe<String>;
  headline_in?: Maybe<String[] | String>;
  headline_not_in?: Maybe<String[] | String>;
  headline_lt?: Maybe<String>;
  headline_lte?: Maybe<String>;
  headline_gt?: Maybe<String>;
  headline_gte?: Maybe<String>;
  headline_contains?: Maybe<String>;
  headline_not_contains?: Maybe<String>;
  headline_starts_with?: Maybe<String>;
  headline_not_starts_with?: Maybe<String>;
  headline_ends_with?: Maybe<String>;
  headline_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  datePublished_not?: Maybe<DateTimeInput>;
  datePublished_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  datePublished_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  datePublished_lt?: Maybe<DateTimeInput>;
  datePublished_lte?: Maybe<DateTimeInput>;
  datePublished_gt?: Maybe<DateTimeInput>;
  datePublished_gte?: Maybe<DateTimeInput>;
  dateModified?: Maybe<DateTimeInput>;
  dateModified_not?: Maybe<DateTimeInput>;
  dateModified_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateModified_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  dateModified_lt?: Maybe<DateTimeInput>;
  dateModified_lte?: Maybe<DateTimeInput>;
  dateModified_gt?: Maybe<DateTimeInput>;
  dateModified_gte?: Maybe<DateTimeInput>;
  body?: Maybe<String>;
  body_not?: Maybe<String>;
  body_in?: Maybe<String[] | String>;
  body_not_in?: Maybe<String[] | String>;
  body_lt?: Maybe<String>;
  body_lte?: Maybe<String>;
  body_gt?: Maybe<String>;
  body_gte?: Maybe<String>;
  body_contains?: Maybe<String>;
  body_not_contains?: Maybe<String>;
  body_starts_with?: Maybe<String>;
  body_not_starts_with?: Maybe<String>;
  body_ends_with?: Maybe<String>;
  body_not_ends_with?: Maybe<String>;
  author?: Maybe<String>;
  author_not?: Maybe<String>;
  author_in?: Maybe<String[] | String>;
  author_not_in?: Maybe<String[] | String>;
  author_lt?: Maybe<String>;
  author_lte?: Maybe<String>;
  author_gt?: Maybe<String>;
  author_gte?: Maybe<String>;
  author_contains?: Maybe<String>;
  author_not_contains?: Maybe<String>;
  author_starts_with?: Maybe<String>;
  author_not_starts_with?: Maybe<String>;
  author_ends_with?: Maybe<String>;
  author_not_ends_with?: Maybe<String>;
  sections_every?: Maybe<ArticleSectionWhereInput>;
  sections_some?: Maybe<ArticleSectionWhereInput>;
  sections_none?: Maybe<ArticleSectionWhereInput>;
  service?: Maybe<ServiceWhereInput>;
  AND?: Maybe<ArticleWhereInput[] | ArticleWhereInput>;
  OR?: Maybe<ArticleWhereInput[] | ArticleWhereInput>;
  NOT?: Maybe<ArticleWhereInput[] | ArticleWhereInput>;
}

export interface ServiceScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<ID_Input>;
  name_not?: Maybe<ID_Input>;
  name_in?: Maybe<ID_Input[] | ID_Input>;
  name_not_in?: Maybe<ID_Input[] | ID_Input>;
  name_lt?: Maybe<ID_Input>;
  name_lte?: Maybe<ID_Input>;
  name_gt?: Maybe<ID_Input>;
  name_gte?: Maybe<ID_Input>;
  name_contains?: Maybe<ID_Input>;
  name_not_contains?: Maybe<ID_Input>;
  name_starts_with?: Maybe<ID_Input>;
  name_not_starts_with?: Maybe<ID_Input>;
  name_ends_with?: Maybe<ID_Input>;
  name_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  language?: Maybe<LANGUAGE>;
  language_not?: Maybe<LANGUAGE>;
  language_in?: Maybe<LANGUAGE[] | LANGUAGE>;
  language_not_in?: Maybe<LANGUAGE[] | LANGUAGE>;
  url?: Maybe<String>;
  url_not?: Maybe<String>;
  url_in?: Maybe<String[] | String>;
  url_not_in?: Maybe<String[] | String>;
  url_lt?: Maybe<String>;
  url_lte?: Maybe<String>;
  url_gt?: Maybe<String>;
  url_gte?: Maybe<String>;
  url_contains?: Maybe<String>;
  url_not_contains?: Maybe<String>;
  url_starts_with?: Maybe<String>;
  url_not_starts_with?: Maybe<String>;
  url_ends_with?: Maybe<String>;
  url_not_ends_with?: Maybe<String>;
  liveUrl?: Maybe<String>;
  liveUrl_not?: Maybe<String>;
  liveUrl_in?: Maybe<String[] | String>;
  liveUrl_not_in?: Maybe<String[] | String>;
  liveUrl_lt?: Maybe<String>;
  liveUrl_lte?: Maybe<String>;
  liveUrl_gt?: Maybe<String>;
  liveUrl_gte?: Maybe<String>;
  liveUrl_contains?: Maybe<String>;
  liveUrl_not_contains?: Maybe<String>;
  liveUrl_starts_with?: Maybe<String>;
  liveUrl_not_starts_with?: Maybe<String>;
  liveUrl_ends_with?: Maybe<String>;
  liveUrl_not_ends_with?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoUrl_not?: Maybe<String>;
  videoUrl_in?: Maybe<String[] | String>;
  videoUrl_not_in?: Maybe<String[] | String>;
  videoUrl_lt?: Maybe<String>;
  videoUrl_lte?: Maybe<String>;
  videoUrl_gt?: Maybe<String>;
  videoUrl_gte?: Maybe<String>;
  videoUrl_contains?: Maybe<String>;
  videoUrl_not_contains?: Maybe<String>;
  videoUrl_starts_with?: Maybe<String>;
  videoUrl_not_starts_with?: Maybe<String>;
  videoUrl_ends_with?: Maybe<String>;
  videoUrl_not_ends_with?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  videoRestUrl_not?: Maybe<String>;
  videoRestUrl_in?: Maybe<String[] | String>;
  videoRestUrl_not_in?: Maybe<String[] | String>;
  videoRestUrl_lt?: Maybe<String>;
  videoRestUrl_lte?: Maybe<String>;
  videoRestUrl_gt?: Maybe<String>;
  videoRestUrl_gte?: Maybe<String>;
  videoRestUrl_contains?: Maybe<String>;
  videoRestUrl_not_contains?: Maybe<String>;
  videoRestUrl_starts_with?: Maybe<String>;
  videoRestUrl_not_starts_with?: Maybe<String>;
  videoRestUrl_ends_with?: Maybe<String>;
  videoRestUrl_not_ends_with?: Maybe<String>;
  AND?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
  OR?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
  NOT?: Maybe<ServiceScalarWhereInput[] | ServiceScalarWhereInput>;
}

export type PlaylistWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ServiceUpdateManyWithWhereNestedInput {
  where: ServiceScalarWhereInput;
  data: ServiceUpdateManyDataInput;
}

export type VideoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  sourceId?: Maybe<String>;
}>;

export interface ServiceUpdateManyDataInput {
  name?: Maybe<ID_Input>;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
}

export interface PlaylistCreateOneWithoutChildrenInput {
  create?: Maybe<PlaylistCreateWithoutChildrenInput>;
  connect?: Maybe<PlaylistWhereUniqueInput>;
}

export interface UserUpsertWithoutPlaylistsInput {
  update: UserUpdateWithoutPlaylistsDataInput;
  create: UserCreateWithoutPlaylistsInput;
}

export interface VideoCreateWithoutServiceInput {
  id?: Maybe<ID_Input>;
  name: String;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateFirstPublished?: Maybe<DateTimeInput>;
  paid?: Maybe<Boolean>;
  sourceId: String;
  sourceType: SOURCE_TYPE;
  tags?: Maybe<VideoCreatetagsInput>;
  metadata?: Maybe<Json>;
  playListItems?: Maybe<PlaylistItemCreateManyWithoutVideoInput>;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpsertWithWhereUniqueWithoutServicesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutServicesDataInput;
  create: UserCreateWithoutServicesInput;
}

export interface PlaylistUpsertWithWhereUniqueWithoutUserInput {
  where: PlaylistWhereUniqueInput;
  update: PlaylistUpdateWithoutUserDataInput;
  create: PlaylistCreateWithoutUserInput;
}

export interface PlaylistUpsertWithoutChildrenInput {
  update: PlaylistUpdateWithoutChildrenDataInput;
  create: PlaylistCreateWithoutChildrenInput;
}

export interface ServiceCreateInput {
  id?: Maybe<ID_Input>;
  name: ID_Input;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  articles?: Maybe<ArticleCreateManyWithoutServiceInput>;
  users?: Maybe<UserCreateManyWithoutServicesInput>;
  videos?: Maybe<VideoCreateManyWithoutServiceInput>;
}

export interface ServiceCreateWithoutVideosInput {
  id?: Maybe<ID_Input>;
  name: ID_Input;
  language?: Maybe<LANGUAGE>;
  url?: Maybe<String>;
  liveUrl?: Maybe<String>;
  videoUrl?: Maybe<String>;
  videoRestUrl?: Maybe<String>;
  articles?: Maybe<ArticleCreateManyWithoutServiceInput>;
  users?: Maybe<UserCreateManyWithoutServicesInput>;
}

export interface ArticleSectionCreateManyWithoutArticlesInput {
  create?: Maybe<
    | ArticleSectionCreateWithoutArticlesInput[]
    | ArticleSectionCreateWithoutArticlesInput
  >;
  connect?: Maybe<
    ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput
  >;
}

export type ServiceWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  name?: Maybe<ID_Input>;
}>;

export interface VideoUpdateInput {
  name?: Maybe<String>;
  description?: Maybe<String>;
  datePublished?: Maybe<DateTimeInput>;
  dateFirstPublished?: Maybe<DateTimeInput>;
  paid?: Maybe<Boolean>;
  sourceId?: Maybe<String>;
  sourceType?: Maybe<SOURCE_TYPE>;
  tags?: Maybe<VideoUpdatetagsInput>;
  metadata?: Maybe<Json>;
  playListItems?: Maybe<PlaylistItemUpdateManyWithoutVideoInput>;
  service?: Maybe<ServiceUpdateOneRequiredWithoutVideosInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface VideoPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
  datePublished?: DateTimeOutput;
  dateFirstPublished?: DateTimeOutput;
  paid: Boolean;
  sourceId: String;
  sourceType: SOURCE_TYPE;
  tags: String[];
  metadata: Json;
}

export interface VideoPreviousValuesPromise
  extends Promise<VideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  dateFirstPublished: () => Promise<DateTimeOutput>;
  paid: () => Promise<Boolean>;
  sourceId: () => Promise<String>;
  sourceType: () => Promise<SOURCE_TYPE>;
  tags: () => Promise<String[]>;
  metadata: () => Promise<Json>;
}

export interface VideoPreviousValuesSubscription
  extends Promise<AsyncIterator<VideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  datePublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateFirstPublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  paid: () => Promise<AsyncIterator<Boolean>>;
  sourceId: () => Promise<AsyncIterator<String>>;
  sourceType: () => Promise<AsyncIterator<SOURCE_TYPE>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  metadata: () => Promise<AsyncIterator<Json>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleSection {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ArticleSectionPromise
  extends Promise<ArticleSection>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  articles: <T = FragmentableArray<Article>>(args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArticleSectionSubscription
  extends Promise<AsyncIterator<ArticleSection>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  articles: <T = Promise<AsyncIterator<ArticleSubscription>>>(args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ArticleSectionNullablePromise
  extends Promise<ArticleSection | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  articles: <T = FragmentableArray<Article>>(args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateArticle {
  count: Int;
}

export interface AggregateArticlePromise
  extends Promise<AggregateArticle>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleSubscription
  extends Promise<AsyncIterator<AggregateArticle>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServicePreviousValues {
  id: ID_Output;
  name: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
}

export interface ServicePreviousValuesPromise
  extends Promise<ServicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  language: () => Promise<LANGUAGE>;
  url: () => Promise<String>;
  liveUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  videoRestUrl: () => Promise<String>;
}

export interface ServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ServicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  language: () => Promise<AsyncIterator<LANGUAGE>>;
  url: () => Promise<AsyncIterator<String>>;
  liveUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  videoRestUrl: () => Promise<AsyncIterator<String>>;
}

export interface ArticleEdge {
  node: Article;
  cursor: String;
}

export interface ArticleEdgePromise extends Promise<ArticleEdge>, Fragmentable {
  node: <T = ArticlePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleEdgeSubscription
  extends Promise<AsyncIterator<ArticleEdge>>,
    Fragmentable {
  node: <T = ArticleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleConnection {
  pageInfo: PageInfo;
  edges: ArticleEdge[];
}

export interface ArticleConnectionPromise
  extends Promise<ArticleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleEdge>>() => T;
  aggregate: <T = AggregateArticlePromise>() => T;
}

export interface ArticleConnectionSubscription
  extends Promise<AsyncIterator<ArticleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticleSubscription>() => T;
}

export interface Service {
  id: ID_Output;
  name: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
}

export interface ServicePromise extends Promise<Service>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  language: () => Promise<LANGUAGE>;
  url: () => Promise<String>;
  liveUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  videoRestUrl: () => Promise<String>;
  articles: <T = FragmentableArray<Article>>(args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  videos: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ServiceSubscription
  extends Promise<AsyncIterator<Service>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  language: () => Promise<AsyncIterator<LANGUAGE>>;
  url: () => Promise<AsyncIterator<String>>;
  liveUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  videoRestUrl: () => Promise<AsyncIterator<String>>;
  articles: <T = Promise<AsyncIterator<ArticleSubscription>>>(args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  videos: <T = Promise<AsyncIterator<VideoSubscription>>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ServiceNullablePromise
  extends Promise<Service | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  language: () => Promise<LANGUAGE>;
  url: () => Promise<String>;
  liveUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  videoRestUrl: () => Promise<String>;
  articles: <T = FragmentableArray<Article>>(args?: {
    where?: ArticleWhereInput;
    orderBy?: ArticleOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  videos: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateVideo {
  count: Int;
}

export interface AggregateVideoPromise
  extends Promise<AggregateVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVideoSubscription
  extends Promise<AsyncIterator<AggregateVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VideoConnection {
  pageInfo: PageInfo;
  edges: VideoEdge[];
}

export interface VideoConnectionPromise
  extends Promise<VideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VideoEdge>>() => T;
  aggregate: <T = AggregateVideoPromise>() => T;
}

export interface VideoConnectionSubscription
  extends Promise<AsyncIterator<VideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVideoSubscription>() => T;
}

export interface Article {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  headline: String;
  description?: String;
  datePublished: DateTimeOutput;
  dateModified?: DateTimeOutput;
  body?: String;
  author?: String;
  tags: String[];
  images: String[];
}

export interface ArticlePromise extends Promise<Article>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  headline: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  dateModified: () => Promise<DateTimeOutput>;
  body: () => Promise<String>;
  author: () => Promise<String>;
  tags: () => Promise<String[]>;
  images: () => Promise<String[]>;
  sections: <T = FragmentableArray<ArticleSection>>(args?: {
    where?: ArticleSectionWhereInput;
    orderBy?: ArticleSectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  service: <T = ServicePromise>() => T;
}

export interface ArticleSubscription
  extends Promise<AsyncIterator<Article>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  headline: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  datePublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateModified: () => Promise<AsyncIterator<DateTimeOutput>>;
  body: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  images: () => Promise<AsyncIterator<String[]>>;
  sections: <T = Promise<AsyncIterator<ArticleSectionSubscription>>>(args?: {
    where?: ArticleSectionWhereInput;
    orderBy?: ArticleSectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  service: <T = ServiceSubscription>() => T;
}

export interface ArticleNullablePromise
  extends Promise<Article | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  headline: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  dateModified: () => Promise<DateTimeOutput>;
  body: () => Promise<String>;
  author: () => Promise<String>;
  tags: () => Promise<String[]>;
  images: () => Promise<String[]>;
  sections: <T = FragmentableArray<ArticleSection>>(args?: {
    where?: ArticleSectionWhereInput;
    orderBy?: ArticleSectionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  service: <T = ServicePromise>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Video {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  description?: String;
  datePublished?: DateTimeOutput;
  dateFirstPublished?: DateTimeOutput;
  paid: Boolean;
  sourceId: String;
  sourceType: SOURCE_TYPE;
  tags: String[];
  metadata: Json;
}

export interface VideoPromise extends Promise<Video>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  dateFirstPublished: () => Promise<DateTimeOutput>;
  paid: () => Promise<Boolean>;
  sourceId: () => Promise<String>;
  sourceType: () => Promise<SOURCE_TYPE>;
  tags: () => Promise<String[]>;
  metadata: () => Promise<Json>;
  playListItems: <T = FragmentableArray<PlaylistItem>>(args?: {
    where?: PlaylistItemWhereInput;
    orderBy?: PlaylistItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  service: <T = ServicePromise>() => T;
}

export interface VideoSubscription
  extends Promise<AsyncIterator<Video>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  datePublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateFirstPublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  paid: () => Promise<AsyncIterator<Boolean>>;
  sourceId: () => Promise<AsyncIterator<String>>;
  sourceType: () => Promise<AsyncIterator<SOURCE_TYPE>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  metadata: () => Promise<AsyncIterator<Json>>;
  playListItems: <T = Promise<AsyncIterator<PlaylistItemSubscription>>>(args?: {
    where?: PlaylistItemWhereInput;
    orderBy?: PlaylistItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  service: <T = ServiceSubscription>() => T;
}

export interface VideoNullablePromise
  extends Promise<Video | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  dateFirstPublished: () => Promise<DateTimeOutput>;
  paid: () => Promise<Boolean>;
  sourceId: () => Promise<String>;
  sourceType: () => Promise<SOURCE_TYPE>;
  tags: () => Promise<String[]>;
  metadata: () => Promise<Json>;
  playListItems: <T = FragmentableArray<PlaylistItem>>(args?: {
    where?: PlaylistItemWhereInput;
    orderBy?: PlaylistItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  service: <T = ServicePromise>() => T;
}

export interface AggregateService {
  count: Int;
}

export interface AggregateServicePromise
  extends Promise<AggregateService>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceSubscription
  extends Promise<AsyncIterator<AggregateService>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ServiceConnection {
  pageInfo: PageInfo;
  edges: ServiceEdge[];
}

export interface ServiceConnectionPromise
  extends Promise<ServiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceEdge>>() => T;
  aggregate: <T = AggregateServicePromise>() => T;
}

export interface ServiceConnectionSubscription
  extends Promise<AsyncIterator<ServiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceSubscription>() => T;
}

export interface ArticleSubscriptionPayload {
  mutation: MutationType;
  node: Article;
  updatedFields: String[];
  previousValues: ArticlePreviousValues;
}

export interface ArticleSubscriptionPayloadPromise
  extends Promise<ArticleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticlePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticlePreviousValuesPromise>() => T;
}

export interface ArticleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticlePreviousValuesSubscription>() => T;
}

export interface PlaylistItemEdge {
  node: PlaylistItem;
  cursor: String;
}

export interface PlaylistItemEdgePromise
  extends Promise<PlaylistItemEdge>,
    Fragmentable {
  node: <T = PlaylistItemPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaylistItemEdgeSubscription
  extends Promise<AsyncIterator<PlaylistItemEdge>>,
    Fragmentable {
  node: <T = PlaylistItemSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticlePreviousValues {
  id: ID_Output;
  url: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  headline: String;
  description?: String;
  datePublished: DateTimeOutput;
  dateModified?: DateTimeOutput;
  body?: String;
  author?: String;
  tags: String[];
  images: String[];
}

export interface ArticlePreviousValuesPromise
  extends Promise<ArticlePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  headline: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  dateModified: () => Promise<DateTimeOutput>;
  body: () => Promise<String>;
  author: () => Promise<String>;
  tags: () => Promise<String[]>;
  images: () => Promise<String[]>;
}

export interface ArticlePreviousValuesSubscription
  extends Promise<AsyncIterator<ArticlePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  headline: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  datePublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  dateModified: () => Promise<AsyncIterator<DateTimeOutput>>;
  body: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  images: () => Promise<AsyncIterator<String[]>>;
}

export interface AggregatePlaylist {
  count: Int;
}

export interface AggregatePlaylistPromise
  extends Promise<AggregatePlaylist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaylistSubscription
  extends Promise<AsyncIterator<AggregatePlaylist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlaylistItem {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  metadata: Json;
}

export interface PlaylistItemPromise
  extends Promise<PlaylistItem>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  metadata: () => Promise<Json>;
  playList: <T = PlaylistPromise>() => T;
  video: <T = VideoPromise>() => T;
}

export interface PlaylistItemSubscription
  extends Promise<AsyncIterator<PlaylistItem>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  metadata: () => Promise<AsyncIterator<Json>>;
  playList: <T = PlaylistSubscription>() => T;
  video: <T = VideoSubscription>() => T;
}

export interface PlaylistItemNullablePromise
  extends Promise<PlaylistItem | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  metadata: () => Promise<Json>;
  playList: <T = PlaylistPromise>() => T;
  video: <T = VideoPromise>() => T;
}

export interface PlaylistConnection {
  pageInfo: PageInfo;
  edges: PlaylistEdge[];
}

export interface PlaylistConnectionPromise
  extends Promise<PlaylistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaylistEdge>>() => T;
  aggregate: <T = AggregatePlaylistPromise>() => T;
}

export interface PlaylistConnectionSubscription
  extends Promise<AsyncIterator<PlaylistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaylistEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaylistSubscription>() => T;
}

export interface ArticleSectionSubscriptionPayload {
  mutation: MutationType;
  node: ArticleSection;
  updatedFields: String[];
  previousValues: ArticleSectionPreviousValues;
}

export interface ArticleSectionSubscriptionPayloadPromise
  extends Promise<ArticleSectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticleSectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticleSectionPreviousValuesPromise>() => T;
}

export interface ArticleSectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleSectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleSectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticleSectionPreviousValuesSubscription>() => T;
}

export interface ArticleSectionEdge {
  node: ArticleSection;
  cursor: String;
}

export interface ArticleSectionEdgePromise
  extends Promise<ArticleSectionEdge>,
    Fragmentable {
  node: <T = ArticleSectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleSectionEdgeSubscription
  extends Promise<AsyncIterator<ArticleSectionEdge>>,
    Fragmentable {
  node: <T = ArticleSectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleSectionPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
}

export interface ArticleSectionPreviousValuesPromise
  extends Promise<ArticleSectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
}

export interface ArticleSectionPreviousValuesSubscription
  extends Promise<AsyncIterator<ArticleSectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface VideoSubscriptionPayload {
  mutation: MutationType;
  node: Video;
  updatedFields: String[];
  previousValues: VideoPreviousValues;
}

export interface VideoSubscriptionPayloadPromise
  extends Promise<VideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VideoPreviousValuesPromise>() => T;
}

export interface VideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VideoPreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PlaylistSubscriptionPayload {
  mutation: MutationType;
  node: Playlist;
  updatedFields: String[];
  previousValues: PlaylistPreviousValues;
}

export interface PlaylistSubscriptionPayloadPromise
  extends Promise<PlaylistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlaylistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlaylistPreviousValuesPromise>() => T;
}

export interface PlaylistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaylistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaylistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlaylistPreviousValuesSubscription>() => T;
}

export interface ServiceEdge {
  node: Service;
  cursor: String;
}

export interface ServiceEdgePromise extends Promise<ServiceEdge>, Fragmentable {
  node: <T = ServicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceEdgeSubscription
  extends Promise<AsyncIterator<ServiceEdge>>,
    Fragmentable {
  node: <T = ServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaylistPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  childrenName?: String;
  description?: String;
  metadata: Json;
}

export interface PlaylistPreviousValuesPromise
  extends Promise<PlaylistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  childrenName: () => Promise<String>;
  description: () => Promise<String>;
  metadata: () => Promise<Json>;
}

export interface PlaylistPreviousValuesSubscription
  extends Promise<AsyncIterator<PlaylistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  childrenName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  metadata: () => Promise<AsyncIterator<Json>>;
}

export interface PlaylistItemConnection {
  pageInfo: PageInfo;
  edges: PlaylistItemEdge[];
}

export interface PlaylistItemConnectionPromise
  extends Promise<PlaylistItemConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaylistItemEdge>>() => T;
  aggregate: <T = AggregatePlaylistItemPromise>() => T;
}

export interface PlaylistItemConnectionSubscription
  extends Promise<AsyncIterator<PlaylistItemConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaylistItemEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaylistItemSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  services: <T = FragmentableArray<Service>>(args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  playlists: <T = FragmentableArray<Playlist>>(args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  services: <T = Promise<AsyncIterator<ServiceSubscription>>>(args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  playlists: <T = Promise<AsyncIterator<PlaylistSubscription>>>(args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  services: <T = FragmentableArray<Service>>(args?: {
    where?: ServiceWhereInput;
    orderBy?: ServiceOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  playlists: <T = FragmentableArray<Playlist>>(args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AggregateArticleSection {
  count: Int;
}

export interface AggregateArticleSectionPromise
  extends Promise<AggregateArticleSection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleSectionSubscription
  extends Promise<AsyncIterator<AggregateArticleSection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VideoEdge {
  node: Video;
  cursor: String;
}

export interface VideoEdgePromise extends Promise<VideoEdge>, Fragmentable {
  node: <T = VideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VideoEdgeSubscription
  extends Promise<AsyncIterator<VideoEdge>>,
    Fragmentable {
  node: <T = VideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ServiceSubscriptionPayload {
  mutation: MutationType;
  node: Service;
  updatedFields: String[];
  previousValues: ServicePreviousValues;
}

export interface ServiceSubscriptionPayloadPromise
  extends Promise<ServiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServicePreviousValuesPromise>() => T;
}

export interface ServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServicePreviousValuesSubscription>() => T;
}

export interface Playlist {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  childrenName?: String;
  description?: String;
  metadata: Json;
}

export interface PlaylistPromise extends Promise<Playlist>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  childrenName: () => Promise<String>;
  description: () => Promise<String>;
  metadata: () => Promise<Json>;
  parent: <T = PlaylistPromise>() => T;
  children: <T = FragmentableArray<Playlist>>(args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<PlaylistItem>>(args?: {
    where?: PlaylistItemWhereInput;
    orderBy?: PlaylistItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  service: <T = ServicePromise>() => T;
}

export interface PlaylistSubscription
  extends Promise<AsyncIterator<Playlist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  childrenName: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  metadata: () => Promise<AsyncIterator<Json>>;
  parent: <T = PlaylistSubscription>() => T;
  children: <T = Promise<AsyncIterator<PlaylistSubscription>>>(args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = Promise<AsyncIterator<PlaylistItemSubscription>>>(args?: {
    where?: PlaylistItemWhereInput;
    orderBy?: PlaylistItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
  service: <T = ServiceSubscription>() => T;
}

export interface PlaylistNullablePromise
  extends Promise<Playlist | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  childrenName: () => Promise<String>;
  description: () => Promise<String>;
  metadata: () => Promise<Json>;
  parent: <T = PlaylistPromise>() => T;
  children: <T = FragmentableArray<Playlist>>(args?: {
    where?: PlaylistWhereInput;
    orderBy?: PlaylistOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  items: <T = FragmentableArray<PlaylistItem>>(args?: {
    where?: PlaylistItemWhereInput;
    orderBy?: PlaylistItemOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  service: <T = ServicePromise>() => T;
}

export interface PlaylistItemPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  metadata: Json;
}

export interface PlaylistItemPreviousValuesPromise
  extends Promise<PlaylistItemPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  metadata: () => Promise<Json>;
}

export interface PlaylistItemPreviousValuesSubscription
  extends Promise<AsyncIterator<PlaylistItemPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  metadata: () => Promise<AsyncIterator<Json>>;
}

export interface PlaylistItemSubscriptionPayload {
  mutation: MutationType;
  node: PlaylistItem;
  updatedFields: String[];
  previousValues: PlaylistItemPreviousValues;
}

export interface PlaylistItemSubscriptionPayloadPromise
  extends Promise<PlaylistItemSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlaylistItemPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlaylistItemPreviousValuesPromise>() => T;
}

export interface PlaylistItemSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaylistItemSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaylistItemSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlaylistItemPreviousValuesSubscription>() => T;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ArticleSectionConnection {
  pageInfo: PageInfo;
  edges: ArticleSectionEdge[];
}

export interface ArticleSectionConnectionPromise
  extends Promise<ArticleSectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleSectionEdge>>() => T;
  aggregate: <T = AggregateArticleSectionPromise>() => T;
}

export interface ArticleSectionConnectionSubscription
  extends Promise<AsyncIterator<ArticleSectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticleSectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticleSectionSubscription>() => T;
}

export interface PlaylistEdge {
  node: Playlist;
  cursor: String;
}

export interface PlaylistEdgePromise
  extends Promise<PlaylistEdge>,
    Fragmentable {
  node: <T = PlaylistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaylistEdgeSubscription
  extends Promise<AsyncIterator<PlaylistEdge>>,
    Fragmentable {
  node: <T = PlaylistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePlaylistItem {
  count: Int;
}

export interface AggregatePlaylistItemPromise
  extends Promise<AggregatePlaylistItem>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaylistItemSubscription
  extends Promise<AsyncIterator<AggregatePlaylistItem>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Json = any;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Service",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "LANGUAGE",
    embedded: false
  },
  {
    name: "Article",
    embedded: false
  },
  {
    name: "ArticleSection",
    embedded: false
  },
  {
    name: "Video",
    embedded: false
  },
  {
    name: "Playlist",
    embedded: false
  },
  {
    name: "PlaylistItem",
    embedded: false
  },
  {
    name: "SOURCE_TYPE",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
