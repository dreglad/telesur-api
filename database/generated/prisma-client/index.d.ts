// Code generated by Prisma (prisma@1.20.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  article: (where?: ArticleWhereInput) => Promise<boolean>;
  articleSection: (where?: ArticleSectionWhereInput) => Promise<boolean>;
  service: (where?: ServiceWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  article: (where: ArticleWhereUniqueInput) => ArticlePromise;
  articles: (
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Article>;
  articlesConnection: (
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ArticleConnectionPromise;
  articleSection: (
    where: ArticleSectionWhereUniqueInput
  ) => ArticleSectionPromise;
  articleSections: (
    args?: {
      where?: ArticleSectionWhereInput;
      orderBy?: ArticleSectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<ArticleSection>;
  articleSectionsConnection: (
    args?: {
      where?: ArticleSectionWhereInput;
      orderBy?: ArticleSectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ArticleSectionConnectionPromise;
  service: (where: ServiceWhereUniqueInput) => ServicePromise;
  services: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Service>;
  servicesConnection: (
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => ServiceConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createArticle: (data: ArticleCreateInput) => ArticlePromise;
  updateArticle: (
    args: { data: ArticleUpdateInput; where: ArticleWhereUniqueInput }
  ) => ArticlePromise;
  updateManyArticles: (
    args: { data: ArticleUpdateManyMutationInput; where?: ArticleWhereInput }
  ) => BatchPayloadPromise;
  upsertArticle: (
    args: {
      where: ArticleWhereUniqueInput;
      create: ArticleCreateInput;
      update: ArticleUpdateInput;
    }
  ) => ArticlePromise;
  deleteArticle: (where: ArticleWhereUniqueInput) => ArticlePromise;
  deleteManyArticles: (where?: ArticleWhereInput) => BatchPayloadPromise;
  createArticleSection: (
    data: ArticleSectionCreateInput
  ) => ArticleSectionPromise;
  updateArticleSection: (
    args: {
      data: ArticleSectionUpdateInput;
      where: ArticleSectionWhereUniqueInput;
    }
  ) => ArticleSectionPromise;
  updateManyArticleSections: (
    args: {
      data: ArticleSectionUpdateManyMutationInput;
      where?: ArticleSectionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertArticleSection: (
    args: {
      where: ArticleSectionWhereUniqueInput;
      create: ArticleSectionCreateInput;
      update: ArticleSectionUpdateInput;
    }
  ) => ArticleSectionPromise;
  deleteArticleSection: (
    where: ArticleSectionWhereUniqueInput
  ) => ArticleSectionPromise;
  deleteManyArticleSections: (
    where?: ArticleSectionWhereInput
  ) => BatchPayloadPromise;
  createService: (data: ServiceCreateInput) => ServicePromise;
  updateService: (
    args: { data: ServiceUpdateInput; where: ServiceWhereUniqueInput }
  ) => ServicePromise;
  updateManyServices: (
    args: { data: ServiceUpdateManyMutationInput; where?: ServiceWhereInput }
  ) => BatchPayloadPromise;
  upsertService: (
    args: {
      where: ServiceWhereUniqueInput;
      create: ServiceCreateInput;
      update: ServiceUpdateInput;
    }
  ) => ServicePromise;
  deleteService: (where: ServiceWhereUniqueInput) => ServicePromise;
  deleteManyServices: (where?: ServiceWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  article: (
    where?: ArticleSubscriptionWhereInput
  ) => ArticleSubscriptionPayloadSubscription;
  articleSection: (
    where?: ArticleSectionSubscriptionWhereInput
  ) => ArticleSectionSubscriptionPayloadSubscription;
  service: (
    where?: ServiceSubscriptionWhereInput
  ) => ServiceSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type LANGUAGE = "ES" | "EN";

export type ArticleSectionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ArticleOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "url_ASC"
  | "url_DESC"
  | "headline_ASC"
  | "headline_DESC"
  | "description_ASC"
  | "description_DESC"
  | "datePublished_ASC"
  | "datePublished_DESC"
  | "body_ASC"
  | "body_DESC"
  | "bodyMarkdown_ASC"
  | "bodyMarkdown_DESC"
  | "author_ASC"
  | "author_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ServiceOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "language_ASC"
  | "language_DESC"
  | "url_ASC"
  | "url_DESC"
  | "liveUrl_ASC"
  | "liveUrl_DESC"
  | "videoUrl_ASC"
  | "videoUrl_DESC"
  | "videoRestUrl_ASC"
  | "videoRestUrl_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface ArticleSectionUpsertWithWhereUniqueWithoutArticlesInput {
  where: ArticleSectionWhereUniqueInput;
  update: ArticleSectionUpdateWithoutArticlesDataInput;
  create: ArticleSectionCreateWithoutArticlesInput;
}

export type ArticleWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  url?: String;
}>;

export interface UserUpdateWithWhereUniqueWithoutServicesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutServicesDataInput;
}

export interface ServiceWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: ID_Input;
  name_not?: ID_Input;
  name_in?: ID_Input[] | ID_Input;
  name_not_in?: ID_Input[] | ID_Input;
  name_lt?: ID_Input;
  name_lte?: ID_Input;
  name_gt?: ID_Input;
  name_gte?: ID_Input;
  name_contains?: ID_Input;
  name_not_contains?: ID_Input;
  name_starts_with?: ID_Input;
  name_not_starts_with?: ID_Input;
  name_ends_with?: ID_Input;
  name_not_ends_with?: ID_Input;
  language?: LANGUAGE;
  language_not?: LANGUAGE;
  language_in?: LANGUAGE[] | LANGUAGE;
  language_not_in?: LANGUAGE[] | LANGUAGE;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  liveUrl?: String;
  liveUrl_not?: String;
  liveUrl_in?: String[] | String;
  liveUrl_not_in?: String[] | String;
  liveUrl_lt?: String;
  liveUrl_lte?: String;
  liveUrl_gt?: String;
  liveUrl_gte?: String;
  liveUrl_contains?: String;
  liveUrl_not_contains?: String;
  liveUrl_starts_with?: String;
  liveUrl_not_starts_with?: String;
  liveUrl_ends_with?: String;
  liveUrl_not_ends_with?: String;
  videoUrl?: String;
  videoUrl_not?: String;
  videoUrl_in?: String[] | String;
  videoUrl_not_in?: String[] | String;
  videoUrl_lt?: String;
  videoUrl_lte?: String;
  videoUrl_gt?: String;
  videoUrl_gte?: String;
  videoUrl_contains?: String;
  videoUrl_not_contains?: String;
  videoUrl_starts_with?: String;
  videoUrl_not_starts_with?: String;
  videoUrl_ends_with?: String;
  videoUrl_not_ends_with?: String;
  videoRestUrl?: String;
  videoRestUrl_not?: String;
  videoRestUrl_in?: String[] | String;
  videoRestUrl_not_in?: String[] | String;
  videoRestUrl_lt?: String;
  videoRestUrl_lte?: String;
  videoRestUrl_gt?: String;
  videoRestUrl_gte?: String;
  videoRestUrl_contains?: String;
  videoRestUrl_not_contains?: String;
  videoRestUrl_starts_with?: String;
  videoRestUrl_not_starts_with?: String;
  videoRestUrl_ends_with?: String;
  videoRestUrl_not_ends_with?: String;
  articles_every?: ArticleWhereInput;
  articles_some?: ArticleWhereInput;
  articles_none?: ArticleWhereInput;
  users_every?: UserWhereInput;
  users_some?: UserWhereInput;
  users_none?: UserWhereInput;
  AND?: ServiceWhereInput[] | ServiceWhereInput;
  OR?: ServiceWhereInput[] | ServiceWhereInput;
  NOT?: ServiceWhereInput[] | ServiceWhereInput;
}

export interface UserUpdateWithoutServicesDataInput {
  email?: String;
  name?: String;
}

export interface ArticleWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  url?: String;
  url_not?: String;
  url_in?: String[] | String;
  url_not_in?: String[] | String;
  url_lt?: String;
  url_lte?: String;
  url_gt?: String;
  url_gte?: String;
  url_contains?: String;
  url_not_contains?: String;
  url_starts_with?: String;
  url_not_starts_with?: String;
  url_ends_with?: String;
  url_not_ends_with?: String;
  headline?: String;
  headline_not?: String;
  headline_in?: String[] | String;
  headline_not_in?: String[] | String;
  headline_lt?: String;
  headline_lte?: String;
  headline_gt?: String;
  headline_gte?: String;
  headline_contains?: String;
  headline_not_contains?: String;
  headline_starts_with?: String;
  headline_not_starts_with?: String;
  headline_ends_with?: String;
  headline_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  datePublished?: DateTimeInput;
  datePublished_not?: DateTimeInput;
  datePublished_in?: DateTimeInput[] | DateTimeInput;
  datePublished_not_in?: DateTimeInput[] | DateTimeInput;
  datePublished_lt?: DateTimeInput;
  datePublished_lte?: DateTimeInput;
  datePublished_gt?: DateTimeInput;
  datePublished_gte?: DateTimeInput;
  body?: String;
  body_not?: String;
  body_in?: String[] | String;
  body_not_in?: String[] | String;
  body_lt?: String;
  body_lte?: String;
  body_gt?: String;
  body_gte?: String;
  body_contains?: String;
  body_not_contains?: String;
  body_starts_with?: String;
  body_not_starts_with?: String;
  body_ends_with?: String;
  body_not_ends_with?: String;
  bodyMarkdown?: String;
  bodyMarkdown_not?: String;
  bodyMarkdown_in?: String[] | String;
  bodyMarkdown_not_in?: String[] | String;
  bodyMarkdown_lt?: String;
  bodyMarkdown_lte?: String;
  bodyMarkdown_gt?: String;
  bodyMarkdown_gte?: String;
  bodyMarkdown_contains?: String;
  bodyMarkdown_not_contains?: String;
  bodyMarkdown_starts_with?: String;
  bodyMarkdown_not_starts_with?: String;
  bodyMarkdown_ends_with?: String;
  bodyMarkdown_not_ends_with?: String;
  author?: String;
  author_not?: String;
  author_in?: String[] | String;
  author_not_in?: String[] | String;
  author_lt?: String;
  author_lte?: String;
  author_gt?: String;
  author_gte?: String;
  author_contains?: String;
  author_not_contains?: String;
  author_starts_with?: String;
  author_not_starts_with?: String;
  author_ends_with?: String;
  author_not_ends_with?: String;
  sections_every?: ArticleSectionWhereInput;
  sections_some?: ArticleSectionWhereInput;
  sections_none?: ArticleSectionWhereInput;
  service?: ServiceWhereInput;
  AND?: ArticleWhereInput[] | ArticleWhereInput;
  OR?: ArticleWhereInput[] | ArticleWhereInput;
  NOT?: ArticleWhereInput[] | ArticleWhereInput;
}

export interface ServiceCreateWithoutArticlesInput {
  name: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  users?: UserCreateManyWithoutServicesInput;
}

export interface ArticleSectionUpdateManyMutationInput {
  name?: String;
}

export interface UserCreateManyWithoutServicesInput {
  create?: UserCreateWithoutServicesInput[] | UserCreateWithoutServicesInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutServicesInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutServicesDataInput;
  create: UserCreateWithoutServicesInput;
}

export interface UserCreateWithoutServicesInput {
  email: String;
  name?: String;
}

export interface ServiceSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ServiceWhereInput;
  AND?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  OR?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
  NOT?: ServiceSubscriptionWhereInput[] | ServiceSubscriptionWhereInput;
}

export interface ArticleUpdateInput {
  url?: String;
  headline?: String;
  description?: String;
  datePublished?: DateTimeInput;
  body?: String;
  bodyMarkdown?: String;
  author?: String;
  tags?: ArticleUpdatetagsInput;
  images?: ArticleUpdateimagesInput;
  sections?: ArticleSectionUpdateManyWithoutArticlesInput;
  service?: ServiceUpdateOneRequiredWithoutArticlesInput;
}

export interface ArticleSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ArticleWhereInput;
  AND?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput;
  OR?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput;
  NOT?: ArticleSubscriptionWhereInput[] | ArticleSubscriptionWhereInput;
}

export interface ArticleUpdatetagsInput {
  set?: String[] | String;
}

export interface ServiceUpsertWithWhereUniqueWithoutUsersInput {
  where: ServiceWhereUniqueInput;
  update: ServiceUpdateWithoutUsersDataInput;
  create: ServiceCreateWithoutUsersInput;
}

export interface ArticleUpdateimagesInput {
  set?: String[] | String;
}

export interface ServiceUpdateWithWhereUniqueWithoutUsersInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateWithoutUsersDataInput;
}

export interface ArticleSectionUpdateManyWithoutArticlesInput {
  create?:
    | ArticleSectionCreateWithoutArticlesInput[]
    | ArticleSectionCreateWithoutArticlesInput;
  delete?: ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput;
  connect?: ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput;
  disconnect?:
    | ArticleSectionWhereUniqueInput[]
    | ArticleSectionWhereUniqueInput;
  update?:
    | ArticleSectionUpdateWithWhereUniqueWithoutArticlesInput[]
    | ArticleSectionUpdateWithWhereUniqueWithoutArticlesInput;
  upsert?:
    | ArticleSectionUpsertWithWhereUniqueWithoutArticlesInput[]
    | ArticleSectionUpsertWithWhereUniqueWithoutArticlesInput;
}

export type ArticleSectionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface ArticleSectionUpdateWithWhereUniqueWithoutArticlesInput {
  where: ArticleSectionWhereUniqueInput;
  data: ArticleSectionUpdateWithoutArticlesDataInput;
}

export interface ServiceCreateWithoutUsersInput {
  name: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleCreateManyWithoutServiceInput;
}

export interface ArticleSectionUpdateWithoutArticlesDataInput {
  name?: String;
}

export type ServiceWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: ID_Input;
}>;

export interface ServiceUpdateInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleUpdateManyWithoutServiceInput;
  users?: UserUpdateManyWithoutServicesInput;
}

export interface ServiceUpdateManyMutationInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
}

export interface ServiceUpdateOneRequiredWithoutArticlesInput {
  create?: ServiceCreateWithoutArticlesInput;
  update?: ServiceUpdateWithoutArticlesDataInput;
  upsert?: ServiceUpsertWithoutArticlesInput;
  connect?: ServiceWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface ServiceUpdateWithoutArticlesDataInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  users?: UserUpdateManyWithoutServicesInput;
}

export interface ArticleUpdateWithWhereUniqueWithoutServiceInput {
  where: ArticleWhereUniqueInput;
  data: ArticleUpdateWithoutServiceDataInput;
}

export interface UserUpdateManyWithoutServicesInput {
  create?: UserCreateWithoutServicesInput[] | UserCreateWithoutServicesInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutServicesInput[]
    | UserUpdateWithWhereUniqueWithoutServicesInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutServicesInput[]
    | UserUpsertWithWhereUniqueWithoutServicesInput;
}

export interface ArticleCreatetagsInput {
  set?: String[] | String;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  services_every?: ServiceWhereInput;
  services_some?: ServiceWhereInput;
  services_none?: ServiceWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface ArticleSectionCreateManyWithoutArticlesInput {
  create?:
    | ArticleSectionCreateWithoutArticlesInput[]
    | ArticleSectionCreateWithoutArticlesInput;
  connect?: ArticleSectionWhereUniqueInput[] | ArticleSectionWhereUniqueInput;
}

export interface ArticleCreateWithoutServiceInput {
  url: String;
  headline: String;
  description?: String;
  datePublished: DateTimeInput;
  body: String;
  bodyMarkdown?: String;
  author?: String;
  tags?: ArticleCreatetagsInput;
  images?: ArticleCreateimagesInput;
  sections?: ArticleSectionCreateManyWithoutArticlesInput;
}

export interface ServiceCreateOneWithoutArticlesInput {
  create?: ServiceCreateWithoutArticlesInput;
  connect?: ServiceWhereUniqueInput;
}

export interface ArticleSectionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  articles_every?: ArticleWhereInput;
  articles_some?: ArticleWhereInput;
  articles_none?: ArticleWhereInput;
  AND?: ArticleSectionWhereInput[] | ArticleSectionWhereInput;
  OR?: ArticleSectionWhereInput[] | ArticleSectionWhereInput;
  NOT?: ArticleSectionWhereInput[] | ArticleSectionWhereInput;
}

export interface ArticleSectionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ArticleSectionWhereInput;
  AND?:
    | ArticleSectionSubscriptionWhereInput[]
    | ArticleSectionSubscriptionWhereInput;
  OR?:
    | ArticleSectionSubscriptionWhereInput[]
    | ArticleSectionSubscriptionWhereInput;
  NOT?:
    | ArticleSectionSubscriptionWhereInput[]
    | ArticleSectionSubscriptionWhereInput;
}

export interface ServiceUpsertWithoutArticlesInput {
  update: ServiceUpdateWithoutArticlesDataInput;
  create: ServiceCreateWithoutArticlesInput;
}

export interface ServiceUpdateWithoutUsersDataInput {
  name?: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleUpdateManyWithoutServiceInput;
}

export interface ArticleUpdateManyMutationInput {
  url?: String;
  headline?: String;
  description?: String;
  datePublished?: DateTimeInput;
  body?: String;
  bodyMarkdown?: String;
  author?: String;
  tags?: ArticleUpdatetagsInput;
  images?: ArticleUpdateimagesInput;
}

export interface UserUpdateInput {
  email?: String;
  name?: String;
  services?: ServiceUpdateManyWithoutUsersInput;
}

export interface ArticleCreateManyWithoutServiceInput {
  create?:
    | ArticleCreateWithoutServiceInput[]
    | ArticleCreateWithoutServiceInput;
  connect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
}

export interface UserCreateInput {
  email: String;
  name?: String;
  services?: ServiceCreateManyWithoutUsersInput;
}

export interface ServiceCreateInput {
  name: ID_Input;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
  articles?: ArticleCreateManyWithoutServiceInput;
  users?: UserCreateManyWithoutServicesInput;
}

export interface ArticleUpdateWithoutServiceDataInput {
  url?: String;
  headline?: String;
  description?: String;
  datePublished?: DateTimeInput;
  body?: String;
  bodyMarkdown?: String;
  author?: String;
  tags?: ArticleUpdatetagsInput;
  images?: ArticleUpdateimagesInput;
  sections?: ArticleSectionUpdateManyWithoutArticlesInput;
}

export interface ArticleSectionCreateInput {
  name: String;
  articles?: ArticleCreateManyWithoutSectionsInput;
}

export interface ArticleCreateInput {
  url: String;
  headline: String;
  description?: String;
  datePublished: DateTimeInput;
  body: String;
  bodyMarkdown?: String;
  author?: String;
  tags?: ArticleCreatetagsInput;
  images?: ArticleCreateimagesInput;
  sections?: ArticleSectionCreateManyWithoutArticlesInput;
  service: ServiceCreateOneWithoutArticlesInput;
}

export interface ArticleCreateManyWithoutSectionsInput {
  create?:
    | ArticleCreateWithoutSectionsInput[]
    | ArticleCreateWithoutSectionsInput;
  connect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
}

export interface ArticleSectionCreateWithoutArticlesInput {
  name: String;
}

export interface ArticleCreateWithoutSectionsInput {
  url: String;
  headline: String;
  description?: String;
  datePublished: DateTimeInput;
  body: String;
  bodyMarkdown?: String;
  author?: String;
  tags?: ArticleCreatetagsInput;
  images?: ArticleCreateimagesInput;
  service: ServiceCreateOneWithoutArticlesInput;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  name?: String;
}

export interface ArticleSectionUpdateInput {
  name?: String;
  articles?: ArticleUpdateManyWithoutSectionsInput;
}

export interface ServiceCreateManyWithoutUsersInput {
  create?: ServiceCreateWithoutUsersInput[] | ServiceCreateWithoutUsersInput;
  connect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
}

export interface ArticleUpsertWithWhereUniqueWithoutSectionsInput {
  where: ArticleWhereUniqueInput;
  update: ArticleUpdateWithoutSectionsDataInput;
  create: ArticleCreateWithoutSectionsInput;
}

export interface ArticleUpdateWithoutSectionsDataInput {
  url?: String;
  headline?: String;
  description?: String;
  datePublished?: DateTimeInput;
  body?: String;
  bodyMarkdown?: String;
  author?: String;
  tags?: ArticleUpdatetagsInput;
  images?: ArticleUpdateimagesInput;
  service?: ServiceUpdateOneRequiredWithoutArticlesInput;
}

export interface ArticleUpdateWithWhereUniqueWithoutSectionsInput {
  where: ArticleWhereUniqueInput;
  data: ArticleUpdateWithoutSectionsDataInput;
}

export interface ArticleUpdateManyWithoutSectionsInput {
  create?:
    | ArticleCreateWithoutSectionsInput[]
    | ArticleCreateWithoutSectionsInput;
  delete?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  connect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  disconnect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  update?:
    | ArticleUpdateWithWhereUniqueWithoutSectionsInput[]
    | ArticleUpdateWithWhereUniqueWithoutSectionsInput;
  upsert?:
    | ArticleUpsertWithWhereUniqueWithoutSectionsInput[]
    | ArticleUpsertWithWhereUniqueWithoutSectionsInput;
}

export interface ArticleUpsertWithWhereUniqueWithoutServiceInput {
  where: ArticleWhereUniqueInput;
  update: ArticleUpdateWithoutServiceDataInput;
  create: ArticleCreateWithoutServiceInput;
}

export interface ServiceUpdateManyWithoutUsersInput {
  create?: ServiceCreateWithoutUsersInput[] | ServiceCreateWithoutUsersInput;
  delete?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  connect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  disconnect?: ServiceWhereUniqueInput[] | ServiceWhereUniqueInput;
  update?:
    | ServiceUpdateWithWhereUniqueWithoutUsersInput[]
    | ServiceUpdateWithWhereUniqueWithoutUsersInput;
  upsert?:
    | ServiceUpsertWithWhereUniqueWithoutUsersInput[]
    | ServiceUpsertWithWhereUniqueWithoutUsersInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface ArticleCreateimagesInput {
  set?: String[] | String;
}

export interface ArticleUpdateManyWithoutServiceInput {
  create?:
    | ArticleCreateWithoutServiceInput[]
    | ArticleCreateWithoutServiceInput;
  delete?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  connect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  disconnect?: ArticleWhereUniqueInput[] | ArticleWhereUniqueInput;
  update?:
    | ArticleUpdateWithWhereUniqueWithoutServiceInput[]
    | ArticleUpdateWithWhereUniqueWithoutServiceInput;
  upsert?:
    | ArticleUpsertWithWhereUniqueWithoutServiceInput[]
    | ArticleUpsertWithWhereUniqueWithoutServiceInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface AggregateArticle {
  count: Int;
}

export interface AggregateArticlePromise
  extends Promise<AggregateArticle>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleSubscription
  extends Promise<AsyncIterator<AggregateArticle>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ServiceSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ServiceSubscriptionPayloadPromise
  extends Promise<ServiceSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ServicePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ServicePreviousValuesPromise>() => T;
}

export interface ServiceSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ServiceSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ServiceSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ServicePreviousValuesSubscription>() => T;
}

export interface ArticleEdge {
  cursor: String;
}

export interface ArticleEdgePromise extends Promise<ArticleEdge>, Fragmentable {
  node: <T = ArticlePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleEdgeSubscription
  extends Promise<AsyncIterator<ArticleEdge>>,
    Fragmentable {
  node: <T = ArticleSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleSection {
  id: ID_Output;
  name: String;
}

export interface ArticleSectionPromise
  extends Promise<ArticleSection>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  articles: <T = FragmentableArray<Article>>(
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ArticleSectionSubscription
  extends Promise<AsyncIterator<ArticleSection>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  articles: <T = Promise<AsyncIterator<ArticleSubscription>>>(
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Service {
  id: ID_Output;
  name: ID_Output;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
}

export interface ServicePromise extends Promise<Service>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ID_Output>;
  language: () => Promise<LANGUAGE>;
  url: () => Promise<String>;
  liveUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  videoRestUrl: () => Promise<String>;
  articles: <T = FragmentableArray<Article>>(
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  users: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ServiceSubscription
  extends Promise<AsyncIterator<Service>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<ID_Output>>;
  language: () => Promise<AsyncIterator<LANGUAGE>>;
  url: () => Promise<AsyncIterator<String>>;
  liveUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  videoRestUrl: () => Promise<AsyncIterator<String>>;
  articles: <T = Promise<AsyncIterator<ArticleSubscription>>>(
    args?: {
      where?: ArticleWhereInput;
      orderBy?: ArticleOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleConnection {}

export interface ArticleConnectionPromise
  extends Promise<ArticleConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleEdge>>() => T;
  aggregate: <T = AggregateArticlePromise>() => T;
}

export interface ArticleConnectionSubscription
  extends Promise<AsyncIterator<ArticleConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticleEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticleSubscription>() => T;
}

export interface AggregateService {
  count: Int;
}

export interface AggregateServicePromise
  extends Promise<AggregateService>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateServiceSubscription
  extends Promise<AsyncIterator<AggregateService>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Article {
  id: ID_Output;
  url: String;
  headline: String;
  description?: String;
  datePublished: DateTimeOutput;
  body: String;
  bodyMarkdown?: String;
  author?: String;
  tags: String[];
  images: String[];
}

export interface ArticlePromise extends Promise<Article>, Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  headline: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  body: () => Promise<String>;
  bodyMarkdown: () => Promise<String>;
  author: () => Promise<String>;
  tags: () => Promise<String[]>;
  images: () => Promise<String[]>;
  sections: <T = FragmentableArray<ArticleSection>>(
    args?: {
      where?: ArticleSectionWhereInput;
      orderBy?: ArticleSectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  service: <T = ServicePromise>() => T;
}

export interface ArticleSubscription
  extends Promise<AsyncIterator<Article>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  headline: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  datePublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  body: () => Promise<AsyncIterator<String>>;
  bodyMarkdown: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  images: () => Promise<AsyncIterator<String[]>>;
  sections: <T = Promise<AsyncIterator<ArticleSectionSubscription>>>(
    args?: {
      where?: ArticleSectionWhereInput;
      orderBy?: ArticleSectionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  service: <T = ServiceSubscription>() => T;
}

export interface ServiceConnection {}

export interface ServiceConnectionPromise
  extends Promise<ServiceConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ServiceEdge>>() => T;
  aggregate: <T = AggregateServicePromise>() => T;
}

export interface ServiceConnectionSubscription
  extends Promise<AsyncIterator<ServiceConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ServiceEdgeSubscription>>>() => T;
  aggregate: <T = AggregateServiceSubscription>() => T;
}

export interface ServicePreviousValues {
  id: ID_Output;
  name: ID_Output;
  language?: LANGUAGE;
  url?: String;
  liveUrl?: String;
  videoUrl?: String;
  videoRestUrl?: String;
}

export interface ServicePreviousValuesPromise
  extends Promise<ServicePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<ID_Output>;
  language: () => Promise<LANGUAGE>;
  url: () => Promise<String>;
  liveUrl: () => Promise<String>;
  videoUrl: () => Promise<String>;
  videoRestUrl: () => Promise<String>;
}

export interface ServicePreviousValuesSubscription
  extends Promise<AsyncIterator<ServicePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<ID_Output>>;
  language: () => Promise<AsyncIterator<LANGUAGE>>;
  url: () => Promise<AsyncIterator<String>>;
  liveUrl: () => Promise<AsyncIterator<String>>;
  videoUrl: () => Promise<AsyncIterator<String>>;
  videoRestUrl: () => Promise<AsyncIterator<String>>;
}

export interface ArticleSectionEdge {
  cursor: String;
}

export interface ArticleSectionEdgePromise
  extends Promise<ArticleSectionEdge>,
    Fragmentable {
  node: <T = ArticleSectionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ArticleSectionEdgeSubscription
  extends Promise<AsyncIterator<ArticleSectionEdge>>,
    Fragmentable {
  node: <T = ArticleSectionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ArticleSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ArticleSubscriptionPayloadPromise
  extends Promise<ArticleSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticlePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticlePreviousValuesPromise>() => T;
}

export interface ArticleSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticlePreviousValuesSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ArticleSectionPreviousValues {
  id: ID_Output;
  name: String;
}

export interface ArticleSectionPreviousValuesPromise
  extends Promise<ArticleSectionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ArticleSectionPreviousValuesSubscription
  extends Promise<AsyncIterator<ArticleSectionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ArticleSectionSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface ArticleSectionSubscriptionPayloadPromise
  extends Promise<ArticleSectionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ArticleSectionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ArticleSectionPreviousValuesPromise>() => T;
}

export interface ArticleSectionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ArticleSectionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ArticleSectionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ArticleSectionPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  name?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  services: <T = FragmentableArray<Service>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  services: <T = Promise<AsyncIterator<ServiceSubscription>>>(
    args?: {
      where?: ServiceWhereInput;
      orderBy?: ServiceOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface ArticlePreviousValues {
  id: ID_Output;
  url: String;
  headline: String;
  description?: String;
  datePublished: DateTimeOutput;
  body: String;
  bodyMarkdown?: String;
  author?: String;
  tags: String[];
  images: String[];
}

export interface ArticlePreviousValuesPromise
  extends Promise<ArticlePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  url: () => Promise<String>;
  headline: () => Promise<String>;
  description: () => Promise<String>;
  datePublished: () => Promise<DateTimeOutput>;
  body: () => Promise<String>;
  bodyMarkdown: () => Promise<String>;
  author: () => Promise<String>;
  tags: () => Promise<String[]>;
  images: () => Promise<String[]>;
}

export interface ArticlePreviousValuesSubscription
  extends Promise<AsyncIterator<ArticlePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  url: () => Promise<AsyncIterator<String>>;
  headline: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  datePublished: () => Promise<AsyncIterator<DateTimeOutput>>;
  body: () => Promise<AsyncIterator<String>>;
  bodyMarkdown: () => Promise<AsyncIterator<String>>;
  author: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  images: () => Promise<AsyncIterator<String[]>>;
}

export interface ServiceEdge {
  cursor: String;
}

export interface ServiceEdgePromise extends Promise<ServiceEdge>, Fragmentable {
  node: <T = ServicePromise>() => T;
  cursor: () => Promise<String>;
}

export interface ServiceEdgeSubscription
  extends Promise<AsyncIterator<ServiceEdge>>,
    Fragmentable {
  node: <T = ServiceSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ArticleSectionConnection {}

export interface ArticleSectionConnectionPromise
  extends Promise<ArticleSectionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ArticleSectionEdge>>() => T;
  aggregate: <T = AggregateArticleSectionPromise>() => T;
}

export interface ArticleSectionConnectionSubscription
  extends Promise<AsyncIterator<ArticleSectionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ArticleSectionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateArticleSectionSubscription>() => T;
}

export interface AggregateArticleSection {
  count: Int;
}

export interface AggregateArticleSectionPromise
  extends Promise<AggregateArticleSection>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateArticleSectionSubscription
  extends Promise<AsyncIterator<AggregateArticleSection>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "Article",
    embedded: false
  },
  {
    name: "ArticleSection",
    embedded: false
  },
  {
    name: "LANGUAGE",
    embedded: false
  },
  {
    name: "Service",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
